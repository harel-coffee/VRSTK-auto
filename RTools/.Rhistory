{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
View(rawBitalinoDataFrameStage0)
write.csv(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data.csv")
write.csv(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.csv")
write.csv(rawBitalinoDataFrameStage0$ECG.raw, file = "Bitalino_Raw_ECG_data_Stage0.csv")
write.csv(rawBitalinoDataFrameStage0$`ECG.raw`, file = "Bitalino_Raw_ECG_data_Stage0.csv")
write.csv2(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.csv")
plot(rawBitalinoDataFrameStage0$time, rawBitalinoDataFrameStage0$ECG.raw)
plot(rawTransferedBitalinoDataFrameStage0$time, rawTransferedBitalinoDataFrameStage0$ECG.in.mV)
# wave plot
plot(rawTransferedBitalinoDataFrameStage0$time, rawTransferedBitalinoDataFrameStage0$ECG.in.mV, col='orange',type='s')
# wave plot
#plot(rawTransferedBitalinoDataFrameStage0$time, rawTransferedBitalinoDataFrameStage0$ECG.in.mV, col='orange',type='s')
plot(rawBitalinoDataFrameStage0$time, rawBitalinoDataFrameStage0$ECG.raw, type='s')
# wave plot
#plot(rawTransferedBitalinoDataFrameStage0$time, rawTransferedBitalinoDataFrameStage0$ECG.in.mV, col='orange',type='s')
#plot(rawBitalinoDataFrameStage0$time, rawBitalinoDataFrameStage0$ECG.raw, type='s')
plot(rawBitalinoDataFrameStage0$time, rawBitalinoDataFrameStage0$ECG.raw, type='l')
plot(rawPerformanceMetricDataFrameStage0$time, rawPerformanceMetricDataFrameStage0$eng, type='l')
plot(rawBandPowerDataFrameStage0$time, rawBandPowerDataFrameStage0$AF3.betaL, type='l')
plot(rawBandPowerDataFrameStage0$time, rawBandPowerDataFrameStage0$AF3.betaL, type='l')
abline(h=rawBandPowerDataFrameStage0$AF3.alpha,col="dark green",lty=2)
plot(rawBandPowerDataFrameStage0$time, rawBandPowerDataFrameStage0$AF3.betaL, type='l')
abline(rawBandPowerDataFrameStage0$AF3.alpha,col="dark green",lty=2)
plot(rawBandPowerDataFrameStage0$time, rawBandPowerDataFrameStage0$AF3.betaL, type='l')
lines(rawBandPowerDataFrameStage0$time,rawBandPowerDataFrameStage0$AF3,col='green')
plot(rawBandPowerDataFrameStage0$time, rawBandPowerDataFrameStage0$AF3.betaL, type='l')
lines(rawBandPowerDataFrameStage0$time, rawBandPowerDataFrameStage0$AF3,col='green')
lines(rawBandPowerDataFrameStage0$time, rawBandPowerDataFrameStage0$F7.betaL,col='blue')
View(rawPagesDataStage1)
View(uncannyValleyAnswersFilteredData)
library(jsonlite)
# uncannyValleyAnswersRawData <- ImportUncannyValleyAnswers()
uncannyAllSSQAnswersRawData <- ImportAllSSQAnswers()
ImportAllSSQAnswers <- function()
{
uncannyAllSSQAnswersRawData <- read.csv2(file = '../Assets/VRSTK/SampleSceneData/Questionnaires/Answers/questionnaireID_SSQ_ALL_SSQAnswers.csv')
head(uncannyAllSSQAnswersRawData)
return(uncannyAllSSQAnswersRawData);
}
# uncannyValleyAnswersRawData <- ImportUncannyValleyAnswers()
uncannyAllSSQAnswersRawData <- ImportAllSSQAnswers()
ImportAllSSQAnswers <- function()
{
allSSQAnswersRawData <- read.csv2(file = '../Assets/VRSTK/SampleSceneData/Questionnaires/Answers/questionnaireID_SSQ_ALL_SSQAnswers.csv')
head(allSSQAnswersRawData)
return(allSSQAnswersRawData);
}
# uncannyValleyAnswersRawData <- ImportUncannyValleyAnswers()
allSSQAnswersRawData <- ImportAllSSQAnswers()
View(allSSQAnswersRawData)
describe(allSSQAnswersRawData)
install.packages("spych")
install.packages("psych")
library(psych)
describe(allSSQAnswersRawData)
# filter out unnecessary rows -> [3:9] row actions
allSSQAnswersSubset <- allSSQAnswersRawData[3:2]
View(allSSQAnswersSubset)
View(uncannyValleyAnswersSubset)
# filter out unnecessary rows -> [3:9] row actions
allSSQAnswersSubset <- allSSQAnswersRawData[3:5]
View(allSSQAnswersSubset)
# filter out unnecessary rows -> [3:9] row actions
countColumns <- ncol(allSSQAnswersRawData)
allSSQAnswersSubset <- allSSQAnswersRawData[3:countColumns]
View(allSSQAnswersSubset)
# filter transposed rows and columns
allSSQAnswersSubsetTrasponiert = t(allSSQAnswersSubset)
View(allSSQAnswersSubsetTrasponiert)
# make a copy of transposed data frame
allSSQAnswersSubsetTrasponiertRenamed <- allSSQAnswersSubsetTrasponiert
# rename columns to the first rows values, delete the first row and make a copy
colnames(allSSQAnswersSubsetTrasponiertRenamed)<-unlist(allSSQAnswersSubsetTrasponiertRenamed[1, ])
allSSQAnswersFilteredData <- allSSQAnswersSubsetTrasponiertRenamed[!row.names(allSSQAnswersSubsetTrasponiertRenamed)=='QuestionID', ]
View(allSSQAnswersFilteredData)
# create data frame
countRows <- nrow(allSSQAnswersFilteredData)
allSSQAnswersFilteredData <- data.frame(as.numeric(allSSQAnswersFilteredData[0:countRows, 1]), as.numeric(allSSQAnswersFilteredData[0:countRows, 2]),
as.numeric(allSSQAnswersFilteredData[0:countRows, 3]), as.numeric(allSSQAnswersFilteredData[0:countRows, 4]),
as.numeric(allSSQAnswersFilteredData[0:countRows, 5]), as.numeric(allSSQAnswersFilteredData[0:countRows, 6]),
as.numeric(allSSQAnswersFilteredData[0:countRows, 7]), as.numeric(allSSQAnswersFilteredData[0:countRows, 8]),
as.numeric(allSSQAnswersFilteredData[0:countRows, 9]), as.numeric(allSSQAnswersFilteredData[0:countRows, 10]),
as.numeric(allSSQAnswersFilteredData[0:countRows, 11]), as.numeric(allSSQAnswersFilteredData[0:countRows, 12]),
as.numeric(allSSQAnswersFilteredData[0:countRows, 13]), as.numeric(allSSQAnswersFilteredData[0:countRows, 14]),
as.numeric(allSSQAnswersFilteredData[0:countRows, 15]), as.numeric(allSSQAnswersFilteredData[0:countRows, 16]))
View(allSSQAnswersFilteredData)
colnames(allSSQAnswersFilteredData) <- unlist(allSSQAnswersSubsetTrasponiertRenamed[1, ])
rownames(allSSQAnswersFilteredData) <- unlist(allSSQAnswersSubsetTrasponiertRenamed[0:countRows])
View(allSSQAnswersFilteredData)
View(allSSQAnswersSubsetTrasponiertRenamed)
rownames(allSSQAnswersFilteredData) <- unlist(allSSQAnswersSubsetTrasponiertRenamed[2:countRows])
allSSQAnswersSubsetTrasponiertRenamed[2:countRows]
unlist(allSSQAnswersSubsetTrasponiertRenamed[2:countRows])
row.names(allSSQAnswersFilteredData) <- 2:countRows
unlist(allSSQAnswersSubsetTrasponiertRenamed[2:countRows+1])
rownames(allSSQAnswersSubsetTrasponiertRenamed)[2:countRows+1]
rownames(allSSQAnswersSubsetTrasponiertRenamed)[1:countRows+1]
rownames(allSSQAnswersFilteredData) <- rownames(allSSQAnswersSubsetTrasponiertRenamed)[1:countRows+1]
describe(allSSQAnswersFilteredData)
# filter out unnecessary rows -> [3:9] row actions
countColumns <- ncol(uncannyValleyAnswersRawData)
uncannyValleyAnswersSubset <- uncannyValleyAnswersRawData[3:countColumns]
# filter transposed rows and columns
uncannyValleyAnswersSubsetTrasponiert = t(uncannyValleyAnswersSubset)
# make a copy of transposed data frame
uncannyValleyAnswersSubsetTrasponiertRenamed <- uncannyValleyAnswersSubsetTrasponiert
# rename columns to the first rows values, delete the first row and make a copy
colnames(uncannyValleyAnswersSubsetTrasponiertRenamed)<-unlist(uncannyValleyAnswersSubsetTrasponiertRenamed[1, ])
uncannyValleyAnswersFilteredData <- uncannyValleyAnswersSubsetTrasponiertRenamed[!row.names(uncannyValleyAnswersSubsetTrasponiertRenamed)=='QuestionID', ]
# create data frame
# data_frame$column <- as.numeric(as.character(data_frame$column)) # needs to be testet
countRows <- nrow(uncannyValleyAnswersFilteredData)
uncannyValleyAnswersFilteredData <- data.frame(as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 1]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 2]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 3]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 4]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 5]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 6]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 7]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 8]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 9]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 10]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 11]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 12]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 13]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 14]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 15]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 16]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 17]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 18]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 19]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 20]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 21]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 22]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 23]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 24]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 25]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 26]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 27]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 28]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 29]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 30]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 31]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 32]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 33]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 34]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 35]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 36]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 37]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 38]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 39]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 40]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 41]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 42]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 43]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 44]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 45]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 46]),
as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 47]), as.numeric(uncannyValleyAnswersFilteredData[0:countRows, 48]))
colnames(uncannyValleyAnswersFilteredData) <- unlist(uncannyValleyAnswersSubsetTrasponiertRenamed[1, ])
rownames(uncannyValleyAnswersFilteredData) <- rownames(uncannyValleyAnswersSubsetTrasponiertRenamed)[1:countRows+1]
View(uncannyValleyAnswersFilteredData)
View(uncannyAllSSQAnswersRawData)
View(uncannyValleyAnswersRawData)
View(uncannyValleyAnswersRawData)
describe(uncannyValleyAnswersFilteredData)
# Motion Sickness Susceptibility Questionnaire (MSSQ)
ImportAllMSSQAnswers <- function()
{
allMSSQAnswersRawData <- read.csv2(file = '../Assets/VRSTK/SampleSceneData/Questionnaires/Answers/MSSQAnswers.csv')
head(allMSSQAnswersRawData)
return(allMSSQAnswersRawData);
}
# uncannyValleyAnswersRawData <- ImportUncannyValleyAnswers()
# allSSQAnswersRawData <- ImportAllSSQAnswers()
allMSSQAnswersRawData <- ImportAllMSSQAnswers()
View(allMSSQAnswersRawData)
### All MSSQ Answers
### ----------------------------------------------------------------------------
describe(allMSSQAnswersRawData)
View(rawBitalinoDataFrameStage0)
install.packages("jsonlite")
install.packages("psych")
library(jsonlite)
library(psych)
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_13-4-46.json')
View(rawTrackingData)
rawBitalinoDataStage0 <- rawTrackingData$Stage0$`BItalinoTracker-3942`;
View(rawBitalinoDataStage0)
install.packages("stringr")
rawTransferedBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rowTransferedValue <- rawBitalinoDataStage0$`_transferedReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rowTransferedValue) && !is.na(rowTransferedValue) && !is.nan(rowTransferedValue) && length(rowTransferedValue) && rowTransferedValue != "")
{
splittedTransferedValue <- stringr::str_split(rowTransferedValue, ";")[[1]]
splittedTransferedValue <- stringr::str_replace(splittedTransferedValue, "\\[", " ")
splittedTransferedValue <- stringr::str_replace(splittedTransferedValue, "\\]", " ")
splittedSecondValue <- stringr::str_split(splittedTransferedValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA in mOhm" = c(as.numeric(splittedSecondValue[3])), "ECG in mV" = c(as.numeric(splittedSecondValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawTransferedBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawTransferedBitalinoDataFrameStage0 <- rbind(rawTransferedBitalinoDataFrameStage0, tempDataFrame)
}
}
}
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
write.csv2(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.csv")
View(rawBitalinoDataFrameStage0)
View(rawBitalinoDataFrameStage0)
#write.csv2(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.csv")
write.table(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.txt", sep = " ")
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_14-24-13.json')
rawBitalinoDataStage0 <- rawTrackingData$Stage0$`BItalinoTracker-3942`;
rawTransferedBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rowTransferedValue <- rawBitalinoDataStage0$`_transferedReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rowTransferedValue) && !is.na(rowTransferedValue) && !is.nan(rowTransferedValue) && length(rowTransferedValue) && rowTransferedValue != "")
{
splittedTransferedValue <- stringr::str_split(rowTransferedValue, ";")[[1]]
splittedTransferedValue <- stringr::str_replace(splittedTransferedValue, "\\[", " ")
splittedTransferedValue <- stringr::str_replace(splittedTransferedValue, "\\]", " ")
splittedSecondValue <- stringr::str_split(splittedTransferedValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA in mOhm" = c(as.numeric(splittedSecondValue[3])), "ECG in mV" = c(as.numeric(splittedSecondValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawTransferedBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawTransferedBitalinoDataFrameStage0 <- rbind(rawTransferedBitalinoDataFrameStage0, tempDataFrame)
}
}
}
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
#write.csv2(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.csv")
write.table(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.txt", sep = " ")
View(rawBitalinoDataFrameStage0)
View(rawTrackingData)
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_14-35-24.json')
View(rawTrackingData)
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_14-49-35.json')
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_14-49-35.json')
View(rawTrackingData)
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_14-54-38.json')
View(rawTrackingData)
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_15-2-28.json')
View(rawTrackingData)
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_15-11-7.json')
View(rawTrackingData)
rawTrackingData <- ImportTrackingData('C:/My_JSON_Data/8-9_15-15-17.json')
View(rawTrackingData)
rawBitalinoDataStage0 <- rawTrackingData$Stage0$`BItalinoTracker-3942`;
rawTransferedBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rowTransferedValue <- rawBitalinoDataStage0$`_transferedReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rowTransferedValue) && !is.na(rowTransferedValue) && !is.nan(rowTransferedValue) && length(rowTransferedValue) && rowTransferedValue != "")
{
splittedTransferedValue <- stringr::str_split(rowTransferedValue, ";")[[1]]
splittedTransferedValue <- stringr::str_replace(splittedTransferedValue, "\\[", " ")
splittedTransferedValue <- stringr::str_replace(splittedTransferedValue, "\\]", " ")
splittedSecondValue <- stringr::str_split(splittedTransferedValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA in mOhm" = c(as.numeric(splittedSecondValue[3])), "ECG in mV" = c(as.numeric(splittedSecondValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawTransferedBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawTransferedBitalinoDataFrameStage0 <- rbind(rawTransferedBitalinoDataFrameStage0, tempDataFrame)
}
}
}
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
#write.csv2(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.csv")
write.table(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.txt", sep = " ")
View(rawBitalinoDataStage0)
View(rawBitalinoDataFrameStage0)
View(rawBitalinoDataStage0)
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
View(rawBitalinoDataFrameStage0)
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
counter <- i
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawTransferedBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
debugSource("D:/hewl/VRSTK_branche/RTools/BitalinoDataFrameFromRawTranferedBitalinoData.R")
debugSource("D:/hewl/VRSTK_branche/RTools/BitalinoDataFrameFromRawTranferedBitalinoData.R")
rawBitalinoDataFrameStage0 <- NULL
for(i in 1:nrow(rawBitalinoDataStage0)) {
rowTimeValue <- rawBitalinoDataStage0$time[i]
rawBitalinoValue <- rawBitalinoDataStage0$`_rawReceivedMessage_TrackingBitalinoWithOSC`[i]
if (!is.null(rawBitalinoValue) && !is.na(rawBitalinoValue) && !is.nan(rawBitalinoValue) && length(rawBitalinoValue) && rawBitalinoValue != "")
{
splittedRawValue <- stringr::str_split(rawBitalinoValue, ";")[[1]]
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\[", " ")
splittedRawValue <- stringr::str_replace(splittedRawValue, "\\]", " ")
splittedSecondRawValue <- stringr::str_split(splittedRawValue, " ")[[2]]
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "EDA raw" = c(as.numeric(splittedSecondRawValue[3])), "ECG raw" = c(as.numeric(splittedSecondRawValue[4])));
if (is.null(rawBitalinoDataFrameStage0))
{
rawBitalinoDataFrameStage0 <- tempDataFrame
}
else
{
rawBitalinoDataFrameStage0 <- rbind(rawBitalinoDataFrameStage0, tempDataFrame)
}
}
}
View(rawBitalinoDataFrameStage0)
#write.csv2(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.csv")
write.table(rawBitalinoDataFrameStage0, file = "Bitalino_Raw_data_Stage0.txt", sep = " ")
