if (!is.null(rawPerformanceMetricValue) && !is.na(rawPerformanceMetricValue) && !is.nan(rawPerformanceMetricValue) && length(rawPerformanceMetricValue) && rawPerformanceMetricValue != "")
{
splittedPerformanceMetricValue <- stringr::str_split(rawPerformanceMetricValue, ";")[[1]]
splittedPerformanceMetricValue <- stringr::str_replace(splittedPerformanceMetricValue, ",", ".")
if (is.null(rawPerformanceMetricDataFrameStage0))
{
rawPerformanceMetricDataFrameStage0 <- data.frame("time" = c(as.numeric(rowTimeValue)), "eng" = c(as.numeric(splittedPerformanceMetricValue[3])), "exc" = c(as.numeric(splittedPerformanceMetricValue[5])),
"lex" = c(as.numeric(splittedPerformanceMetricValue[6])), "str" = c(as.numeric(splittedPerformanceMetricValue[8])), "rel" = c(as.numeric(splittedPerformanceMetricValue[10])),
"int" = c(as.numeric(splittedPerformanceMetricValue[12])), "foc" = c(as.numeric(splittedPerformanceMetricValue[14])));
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedPerformanceMetricValue[3]), as.numeric(splittedPerformanceMetricValue[5]),
as.numeric(splittedPerformanceMetricValue[6]),  as.numeric(splittedPerformanceMetricValue[8]), as.numeric(splittedPerformanceMetricValue[10]),
as.numeric(splittedPerformanceMetricValue[12]), as.numeric(splittedPerformanceMetricValue[14]));
rawPerformanceMetricDataFrameStage0Temp <- rawPerformanceMetricDataFrameStage0
rawPerformanceMetricDataFrameStage0Temp[nrow(rawPerformanceMetricDataFrameStage0) + 1, ] <- row
rawPerformanceMetricDataFrameStage0 <- rawPerformanceMetricDataFrameStage0Temp
}
}
}
rawPerformanceMetricDataFrameStage0Temp <- NULL
rowTimeValue <- NULL
rawPerformanceMetricValue <- NULL
splittedPerformanceMetricValue <- NULL
#-------------- Stage 1
rawPerformanceMetricDataFrameStage1 <- NULL
rawPerformanceMetricDataFrameStage1Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage1)) {
rowTimeValue <- rawEmotivTrackingDataStage1$time[i]
rawPerformanceMetricValue <- rawEmotivTrackingDataStage1$PerformanceMetricsDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rawPerformanceMetricValue) && !is.na(rawPerformanceMetricValue) && !is.nan(rawPerformanceMetricValue) && length(rawPerformanceMetricValue) && rawPerformanceMetricValue != "")
{
splittedPerformanceMetricValue <- stringr::str_split(rawPerformanceMetricValue, ";")[[1]]
splittedPerformanceMetricValue <- stringr::str_replace(splittedPerformanceMetricValue, ",", ".")
if (is.null(rawPerformanceMetricDataFrameStage1))
{
rawPerformanceMetricDataFrameStage1 <- data.frame("time" = c(as.numeric(rowTimeValue)), "eng" = c(as.numeric(rawPerformanceMetricValue[3])), "exc" = c(as.numeric(rawPerformanceMetricValue[5])),
"lex" = c(as.numeric(rawPerformanceMetricValue[6])), "str" = c(as.numeric(rawPerformanceMetricValue[8])), "rel" = c(as.numeric(rawPerformanceMetricValue[10])),
"int" = c(as.numeric(rawPerformanceMetricValue[12])), "foc" = c(as.numeric(rawPerformanceMetricValue[14])));
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(rawPerformanceMetricValue[3]), as.numeric(rawPerformanceMetricValue[5]),
as.numeric(rawPerformanceMetricValue[6]),  as.numeric(rawPerformanceMetricValue[8]), as.numeric(rawPerformanceMetricValue[10]),
as.numeric(rawPerformanceMetricValue[12]), as.numeric(rawPerformanceMetricValue[14]));
rawPerformanceMetricDataFrameStage1Temp <- rawPerformanceMetricDataFrameStage1
rawPerformanceMetricDataFrameStage1Temp[nrow(rawPerformanceMetricDataFrameStage1) + 1, ] <- row
rawPerformanceMetricDataFrameStage1 <- rawPerformanceMetricDataFrameStage1Temp
}
}
}
rawPerformanceMetricDataFrameStage1Temp <- NULL
rowTimeValue <- NULL
rawPerformanceMetricValue <- NULL
splittedPerformanceMetricValue <- NULL
#-------------- Stage 2
rawPerformanceMetricDataFrameStage2 <- NULL
rawPerformanceMetricDataFrameStage2Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage2)) {
rowTimeValue <- rawEmotivTrackingDataStage2$time[i]
rawPerformanceMetricValue <- rawEmotivTrackingDataStage2$PerformanceMetricsDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rawPerformanceMetricValue) && !is.na(rawPerformanceMetricValue) && !is.nan(rawPerformanceMetricValue) && length(rawPerformanceMetricValue) && rawPerformanceMetricValue != "")
{
splittedPerformanceMetricValue <- stringr::str_split(rawPerformanceMetricValue, ";")[[1]]
splittedPerformanceMetricValue <- stringr::str_replace(splittedPerformanceMetricValue, ",", ".")
if (is.null(rawPerformanceMetricDataFrameStage2))
{
rawPerformanceMetricDataFrameStage2 <- tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "eng" = c(as.numeric(splittedPerformanceMetricValue[3])), "exc" = c(as.numeric(splittedPerformanceMetricValue[5])),
"lex" = c(as.numeric(splittedPerformanceMetricValue[6])), "str" = c(as.numeric(splittedPerformanceMetricValue[8])), "rel" = c(as.numeric(splittedPerformanceMetricValue[10])),
"int" = c(as.numeric(splittedPerformanceMetricValue[12])), "foc" = c(as.numeric(splittedPerformanceMetricValue[14])));
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedPerformanceMetricValue[3]), as.numeric(splittedPerformanceMetricValue[5]),
as.numeric(splittedPerformanceMetricValue[6]),  as.numeric(splittedPerformanceMetricValue[8]), as.numeric(splittedPerformanceMetricValue[10]),
as.numeric(splittedPerformanceMetricValue[12]), as.numeric(splittedPerformanceMetricValue[14]));
rawPerformanceMetricDataFrameStage2Temp <- rawPerformanceMetricDataFrameStage2
rawPerformanceMetricDataFrameStage2Temp[nrow(rawPerformanceMetricDataFrameStage2) + 1, ] <- row
rawPerformanceMetricDataFrameStage2 <- rawPerformanceMetricDataFrameStage2Temp
#rawPerformanceMetricDataFrameStage2 <- rbind(rawPerformanceMetricDataFrameStage2, tempDataFrame)
}
}
}
rawPerformanceMetricDataFrameStage2Temp <- NULL
rowTimeValue <- NULL
rawPerformanceMetricValue <- NULL
splittedPerformanceMetricValue <- NULL
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=True)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition A'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-1'
path <- condition + '/' +  type_vrstk + '/'
path <- paste(condition, '/',  type_vrstk, '/')
path <- paste(condition,  type_vrstk, sep='/')
vrstk_files <- list.files(path)
condition <- 'Condition A'
type_vrstk <- 'VRSTK/'
type_biosppy <- 'Biosppy/'
id <- 'id-1'
path <- paste(condition,  type_vrstk, sep='/')
vrstk_files <- list.files(path)
condition <- 'Condition A'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-1'
path <- file.path(condition,  type_vrstk)
vrstk_files <- list.files(path)
path <- file.path("./",condition,  type_vrstk, "/")
path <- file.path(".",condition,  type_vrstk, "/")
vrstk_files <- list.files(path)
vrstk_files <- dir(path)
vrstk_files <- dir(getwd())
path <- file.path(getwd(), condition,  type_vrstk, "/")
vrstk_files <- dir(path)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- dir(path)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- dir(path)
for (file in vrstk_files) {
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
View(ImportTrackingData)
vrstk_files <- list.files(path)
for (file in vrstk_files) {
if(grepl(file, id, fixed=TRUE)){
f <- file.path(path, file)
rawTrackingData <- ImportTrackingData(f)
}
}
for (file in vrstk_files) {
for (file in vrstk_files) {
if(grepl(id, file, fixed=TRUE)){
f <- file.path(path, file)
rawTrackingData <- ImportTrackingData(f)
}
}
for (file in vrstk_files) {
f <- file.path(path, file)
if(grepl(id, file, fixed=TRUE)){
f <- file.path(path, file)
rawTrackingData <- ImportTrackingData(f)
}
}
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
for (file in vrstk_files) {
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
for (file in vrstk_files) {
f <- file
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(str_detect(id, file)){
rawTrackingData <- ImportTrackingData(file)
}
}
test <- "/test/ecgt.txt/-test--id-"
chars <- "id"
res <- str_detect(chars, test)
test <- "/test/ecgt.txt/-test--id-"
chars <- "ec"
res <- str_detect(chars, test)
test <- "/test/ecgt.txt/-test--id-"
chars <- "ec"
res <- grepl(chars, test)
test <- "/test/ecgt.txt/-test--id-"
chars <- "id"
res <- grepl(chars, test)
test <- "/test/ecgt.txt/-test--id-"
chars <- "id"
res <- FALSE
res <- grepl(chars, test)
test <- "Condition B/VRSTK/Proband-id-13-Condition-B_8-23_13-32-7.json"
chars <- "id-13"
res <- FALSE
res <- grepl(chars, test)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
}
}
path <- file.path(condition,  type_biosppy, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
#2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
# 6. RawFixationSaccadsData
source("RawFixationSaccadsData.r", echo=TRUE)
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
# 7. RawVRQuestionnaireToolkitUnconnyValley
source("RawVRQuestionnaireToolkitUnconnyValley.r", echo=TRUE)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQ
source("RawVRQuestionnaireToolkitSSQ.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
View(transformedBilinoEDADataFrameStage0)
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countBandPowerSamples / countTransformedBitalinoSamples
downSample(rawBandPowerDataFrameStage0, factor)
install.packages("caret")
library(caret)
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countBandPowerSamples / countTransformedBitalinoSamples
downSample(rawBandPowerDataFrameStage0, factor)
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countBandPowerSamples / countTransformedBitalinoSamples
downSample(rawBandPowerDataFrameStage0, transformedBilinoECGDataFrameStage0, list = FALSE, yname = "DownSampled")
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countBandPowerSamples / countTransformedBitalinoSamples
test <- downSample(factor, rawBandPowerDataFrameStage0, list = FALSE, yname = "DownSampled")
View(test)
test <- downSample(rawBandPowerDataFrameStage0, factor, list = FALSE, yname = "DownSampled")
test <- NULL
test <- downSample(rawBandPowerDataFrameStage0, factor, list = FALSE, yname = "DownSampled")
test <- NULL
test <- downSample(rawBandPowerDataFrameStage0, factor, yname = "DownSampled")
View(test)
test <- NULL
test <- downSample(rawBandPowerDataFrameStage0, transformedBilinoECGDataFrameStage0, yname = "DownSampled")
View(test)
# Attach packages
library(groupdata2)
install.packages("groupdata2")
# Attach packages
library(groupdata2)
# Create data frame
df <- data.frame(
"participant" = factor(c(1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5)),
"diagnosis" = factor(c(0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0)),
"trial" = c(1, 2, 1, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4),
"score" = sample(c(1:100), 13)
)
# Using downsample()
downsample(df, cat_col = "diagnosis")
# Create data frame
df <- data.frame(
"participant" = factor(c(1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5)),
"diagnosis" = factor(c(0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0)),
"trial" = c(1, 2, 1, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4),
"score" = sample(c(1:100), 13)
)
# Using downsample()
downsample(df, cat_col = "diagnosis")
# Create data frame
df <- data.frame(
"participant" = factor(c(1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5)),
"diagnosis" = factor(c(0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0)),
"trial" = c(1, 2, 1, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4),
"score" = sample(c(1:100), 13)
)
# Using downsample()
test <- downsample(df, cat_col = "diagnosis")
View(df)
View(test)
df <- data.frame(
df <- data.frame(
# Create data frame
df <- data.frame(
"participant" = factor(c(1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5)),
"diagnosis" = factor(c(0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0)),
"trial" = c(1, 2, 1, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4),
"score" = sample(c(1:100), 13)
)
# Using downsample()
test <- downsample(df, cat_col = "diagnosis")
test <- downsample(test, cat_col = "diagnosis")
# Create data frame
df <- data.frame(
"participant" = factor(c(1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5)),
"diagnosis" = factor(c(0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0)),
"trial" = c(1, 2, 1, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4),
"score" = sample(c(1:100), 13)
)
# Using downsample()
test <- downSample(df, cat_col = "diagnosis")
# Create data frame
df <- data.frame(
"participant" = factor(c(1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5)),
"diagnosis" = factor(c(0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0)),
"trial" = c(1, 2, 1, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4),
"score" = sample(c(1:100), 13)
)
test <- downSample(df, c(0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0), yname = "DownSampled")
View(test)
View(test[["x"]])
