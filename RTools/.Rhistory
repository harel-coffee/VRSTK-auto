if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countBandPowerSamples / countTransformedBitalinoSamples
samplesCounter <- 1
downsampledBandPowerDataFrameStage0 <- NULL
for(i in 1:nrow(rawBandPowerDataFrameStage0)) {
if (samplesCounter >= factor && is.null(downsampledBandPowerDataFrameStage0)) {
tempDataFrame <- data.frame("time" = c(as.numeric(rawBandPowerDataFrameStage0[i,1])), "AF3/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,2])),
"AF3/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,3])), "AF3/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,4])),
"AF3/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,5])), "AF3/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,6])),
"F7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,7])), "F7/alpha"   = c(as.numeric(rawBandPowerDataFrameStage0[i,8])),
"F7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,9])), "F7/betaH"   = c(as.numeric(rawBandPowerDataFrameStage0[i,10])),
"F7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,11])),
"F3/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,12])), "F3/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,13])),
"F3/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,14])), "F3/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,15])),
"F3/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,16])),
"FC5/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,17])), "FC5/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,18])),
"FC5/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,19])), "FC5/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,20])),
"FC5/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,21])),
"T7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,22])), "T7/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,23])),
"T7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,24])), "T7/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,25])),
"T7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,26])),
"P7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,27])), "P7/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,28])),
"P7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,29])), "P7/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,30])),
"P7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,31])),
"O1/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,32])), "O1/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,33])),
"O1/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,34])), "O1/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,35])),
"O1/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,36])),
"O2/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,37])), "O2/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,38])),
"O2/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,39])), "O2/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,40])),
"O2/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,41])),
"P8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,42])), "P8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,43])),
"P8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,44])), "P8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,45])),
"P8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,46])),
"T8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,47])), "T8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,48])),
"T8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,49])), "T8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,50])),
"T8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,51])),
"FC6/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,52])), "FC6/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,53])),
"FC6/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,54])), "FC6/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,55])),
"FC6/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,56])),
"F4/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,57])), "F4/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,58])),
"F4/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,59])), "F4/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,60])),
"F4/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,61])),
"F8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,62])), "F8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,63])),
"F8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,64])), "F8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,65])),
"F8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,66])),
"AF4/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,67])), "AF4/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,68])),
"AF4/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,69])), "AF4/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,70])),
"AF4/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,71])));
downsampledBandPowerDataFrameStage0 <- tempDataFrame
samplesCounter <- 0
}
else if(samplesCounter >= factor){
row<-rawBandPowerDataFrameStage0[i,]
downsampledBandPowerDataFrameStage0Temp <- downsampledBandPowerDataFrameStage0
downsampledBandPowerDataFrameStage0Temp[nrow(downsampledBandPowerDataFrameStage0) + 1, ] <- row
downsampledBandPowerDataFrameStage0 <- downsampledBandPowerDataFrameStage0Temp
samplesCounter <- 0
}
if (samplesCounter == 0)
samplesCounter <- 1
else
samplesCounter <- samplesCounter + 1
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countBandPowerSamples %/% countTransformedBitalinoSamples
samplesCounter <- 1
downsampledBandPowerDataFrameStage0 <- NULL
for(i in 1:nrow(rawBandPowerDataFrameStage0)) {
if (samplesCounter >= factor && is.null(downsampledBandPowerDataFrameStage0)) {
tempDataFrame <- data.frame("time" = c(as.numeric(rawBandPowerDataFrameStage0[i,1])), "AF3/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,2])),
"AF3/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,3])), "AF3/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,4])),
"AF3/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,5])), "AF3/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,6])),
"F7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,7])), "F7/alpha"   = c(as.numeric(rawBandPowerDataFrameStage0[i,8])),
"F7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,9])), "F7/betaH"   = c(as.numeric(rawBandPowerDataFrameStage0[i,10])),
"F7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,11])),
"F3/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,12])), "F3/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,13])),
"F3/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,14])), "F3/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,15])),
"F3/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,16])),
"FC5/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,17])), "FC5/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,18])),
"FC5/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,19])), "FC5/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,20])),
"FC5/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,21])),
"T7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,22])), "T7/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,23])),
"T7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,24])), "T7/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,25])),
"T7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,26])),
"P7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,27])), "P7/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,28])),
"P7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,29])), "P7/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,30])),
"P7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,31])),
"O1/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,32])), "O1/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,33])),
"O1/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,34])), "O1/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,35])),
"O1/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,36])),
"O2/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,37])), "O2/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,38])),
"O2/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,39])), "O2/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,40])),
"O2/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,41])),
"P8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,42])), "P8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,43])),
"P8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,44])), "P8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,45])),
"P8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,46])),
"T8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,47])), "T8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,48])),
"T8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,49])), "T8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,50])),
"T8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,51])),
"FC6/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,52])), "FC6/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,53])),
"FC6/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,54])), "FC6/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,55])),
"FC6/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,56])),
"F4/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,57])), "F4/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,58])),
"F4/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,59])), "F4/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,60])),
"F4/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,61])),
"F8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,62])), "F8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,63])),
"F8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,64])), "F8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,65])),
"F8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,66])),
"AF4/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,67])), "AF4/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,68])),
"AF4/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,69])), "AF4/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,70])),
"AF4/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,71])));
downsampledBandPowerDataFrameStage0 <- tempDataFrame
samplesCounter <- 0
}
else if(samplesCounter >= factor){
row<-rawBandPowerDataFrameStage0[i,]
downsampledBandPowerDataFrameStage0Temp <- downsampledBandPowerDataFrameStage0
downsampledBandPowerDataFrameStage0Temp[nrow(downsampledBandPowerDataFrameStage0) + 1, ] <- row
downsampledBandPowerDataFrameStage0 <- downsampledBandPowerDataFrameStage0Temp
samplesCounter <- 0
}
if (samplesCounter == 0)
samplesCounter <- 1
else
samplesCounter <- samplesCounter + 1
}
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countBandPowerSamples %/% countTransformedBitalinoSamples
samplesCounter <- 1
downsampledBandPowerDataFrameStage0 <- NULL
for(i in 1:nrow(rawBandPowerDataFrameStage0)) {
if (samplesCounter == factor && is.null(downsampledBandPowerDataFrameStage0)) {
tempDataFrame <- data.frame("time" = c(as.numeric(rawBandPowerDataFrameStage0[i,1])), "AF3/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,2])),
"AF3/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,3])), "AF3/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,4])),
"AF3/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,5])), "AF3/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,6])),
"F7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,7])), "F7/alpha"   = c(as.numeric(rawBandPowerDataFrameStage0[i,8])),
"F7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,9])), "F7/betaH"   = c(as.numeric(rawBandPowerDataFrameStage0[i,10])),
"F7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,11])),
"F3/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,12])), "F3/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,13])),
"F3/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,14])), "F3/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,15])),
"F3/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,16])),
"FC5/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,17])), "FC5/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,18])),
"FC5/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,19])), "FC5/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,20])),
"FC5/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,21])),
"T7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,22])), "T7/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,23])),
"T7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,24])), "T7/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,25])),
"T7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,26])),
"P7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,27])), "P7/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,28])),
"P7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,29])), "P7/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,30])),
"P7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,31])),
"O1/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,32])), "O1/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,33])),
"O1/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,34])), "O1/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,35])),
"O1/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,36])),
"O2/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,37])), "O2/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,38])),
"O2/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,39])), "O2/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,40])),
"O2/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,41])),
"P8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,42])), "P8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,43])),
"P8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,44])), "P8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,45])),
"P8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,46])),
"T8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,47])), "T8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,48])),
"T8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,49])), "T8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,50])),
"T8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,51])),
"FC6/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,52])), "FC6/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,53])),
"FC6/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,54])), "FC6/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,55])),
"FC6/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,56])),
"F4/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,57])), "F4/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,58])),
"F4/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,59])), "F4/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,60])),
"F4/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,61])),
"F8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,62])), "F8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,63])),
"F8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,64])), "F8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,65])),
"F8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,66])),
"AF4/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,67])), "AF4/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,68])),
"AF4/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,69])), "AF4/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,70])),
"AF4/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,71])));
downsampledBandPowerDataFrameStage0 <- tempDataFrame
samplesCounter <- 0
}
else if(samplesCounter == factor){
row<-rawBandPowerDataFrameStage0[i,]
downsampledBandPowerDataFrameStage0Temp <- downsampledBandPowerDataFrameStage0
downsampledBandPowerDataFrameStage0Temp[nrow(downsampledBandPowerDataFrameStage0) + 1, ] <- row
downsampledBandPowerDataFrameStage0 <- downsampledBandPowerDataFrameStage0Temp
samplesCounter <- 0
}
if (samplesCounter == 0)
samplesCounter <- 1
else
samplesCounter <- samplesCounter + 1
}
View(downsampledBandPowerDataFrameStage0)
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countBandPowerSamples <- nrow(rawBandPowerDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countBandPowerSamples %/% countTransformedBitalinoSamples
samplesCounter <- 1
downsampledBandPowerDataFrameStage0 <- NULL
for(i in 1:nrow(rawBandPowerDataFrameStage0)) {
if (is.null(downsampledBandPowerDataFrameStage0)) {
tempDataFrame <- data.frame("time" = c(as.numeric(rawBandPowerDataFrameStage0[i,1])), "AF3/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,2])),
"AF3/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,3])), "AF3/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,4])),
"AF3/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,5])), "AF3/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,6])),
"F7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,7])), "F7/alpha"   = c(as.numeric(rawBandPowerDataFrameStage0[i,8])),
"F7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,9])), "F7/betaH"   = c(as.numeric(rawBandPowerDataFrameStage0[i,10])),
"F7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,11])),
"F3/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,12])), "F3/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,13])),
"F3/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,14])), "F3/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,15])),
"F3/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,16])),
"FC5/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,17])), "FC5/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,18])),
"FC5/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,19])), "FC5/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,20])),
"FC5/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,21])),
"T7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,22])), "T7/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,23])),
"T7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,24])), "T7/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,25])),
"T7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,26])),
"P7/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,27])), "P7/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,28])),
"P7/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,29])), "P7/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,30])),
"P7/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,31])),
"O1/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,32])), "O1/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,33])),
"O1/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,34])), "O1/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,35])),
"O1/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,36])),
"O2/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,37])), "O2/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,38])),
"O2/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,39])), "O2/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,40])),
"O2/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,41])),
"P8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,42])), "P8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,43])),
"P8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,44])), "P8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,45])),
"P8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,46])),
"T8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,47])), "T8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,48])),
"T8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,49])), "T8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,50])),
"T8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,51])),
"FC6/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,52])), "FC6/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,53])),
"FC6/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,54])), "FC6/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,55])),
"FC6/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,56])),
"F4/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,57])), "F4/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,58])),
"F4/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,59])), "F4/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,60])),
"F4/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,61])),
"F8/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,62])), "F8/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,63])),
"F8/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,64])), "F8/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,65])),
"F8/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,66])),
"AF4/theta" = c(as.numeric(rawBandPowerDataFrameStage0[i,67])), "AF4/alpha" = c(as.numeric(rawBandPowerDataFrameStage0[i,68])),
"AF4/betaL" = c(as.numeric(rawBandPowerDataFrameStage0[i,69])), "AF4/betaH" = c(as.numeric(rawBandPowerDataFrameStage0[i,70])),
"AF4/gamma" = c(as.numeric(rawBandPowerDataFrameStage0[i,71])));
downsampledBandPowerDataFrameStage0 <- tempDataFrame
}
if(samplesCounter == factor){
row<-rawBandPowerDataFrameStage0[i,]
downsampledBandPowerDataFrameStage0Temp <- downsampledBandPowerDataFrameStage0
downsampledBandPowerDataFrameStage0Temp[nrow(downsampledBandPowerDataFrameStage0) + 1, ] <- row
downsampledBandPowerDataFrameStage0 <- downsampledBandPowerDataFrameStage0Temp
samplesCounter <- 0
}
if (samplesCounter == 0)
samplesCounter <- 1
else
samplesCounter <- samplesCounter + 1
}
View(downsampledBandPowerDataFrameStage0)
View(rawBandPowerDataFrameStage0)
View(rawPerformanceMetricDataFrameStage0)
#   3.1 Downsampling/Upsampling
source(DownsampleToBitalinoResults.r, echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
downsampling(3)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
downsampling(4)
countPerformanceMetricSamples <- nrow(rawPerformanceMetricDataFrameStage0)
countTransformedBitalinoSamples <- nrow(transformedBilinoECGDataFrameStage0)
factor <- countPerformanceMetricSamples %/% countTransformedBitalinoSamples
samplesCounter <- 1
downsampledPerformanceMetricDataFrameStage0 <- NULL
for(i in 1:countPerformanceMetricSamples) {
if (samplesCounter == factor && is.null(downsampledPerformanceMetricDataFrameStage0)) {
downsampledPerformanceMetricDataFrameStage0 <- data.frame("time" = c(as.numeric(rawPerformanceMetricDataFrameStage0[i, 1])),
"eng"  = c(as.numeric(rawPerformanceMetricDataFrameStage0[i, 2])),
"exc"  = c(as.numeric(rawPerformanceMetricDataFrameStage0[i, 3])),
"lex"  = c(as.numeric(rawPerformanceMetricDataFrameStage0[i, 4])),
"str"  = c(as.numeric(rawPerformanceMetricDataFrameStage0[i, 5])),
"rel"  = c(as.numeric(rawPerformanceMetricDataFrameStage0[i, 6])),
"int"  = c(as.numeric(rawPerformanceMetricDataFrameStage0[i, 7])),
"foc"  = c(as.numeric(rawPerformanceMetricDataFrameStage0[i, 8])));
samplesCounter <- 0
}
else if(samplesCounter == factor){
row<-rawPerformanceMetricDataFrameStage0[i,]
downsampledBandPerformanceMetricStage0Temp <- downsampledPerformanceMetricDataFrameStage0
downsampledBandPerformanceMetricStage0Temp[nrow(downsampledPerformanceMetricDataFrameStage0) + 1, ] <- row
downsampledPerformanceMetricDataFrameStage0 <- downsampledBandPerformanceMetricStage0Temp
samplesCounter <- 0
}
if (samplesCounter == 0)
samplesCounter <- 1
else
samplesCounter <- samplesCounter + 1
}
View(downsampledBandPerformanceMetricStage0Temp)
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
downsampling(3)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
downsampling(4)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
downsampling(3)
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
downsampling(3)
downsampling(3,0)
bandPowerDataFrameStage0 <- downsampling(3,0)
bandPowerDataFrameStage1 <- downsampling(3,1)
bandPowerDataFrameStage2 <- downsampling(3,2)
bandPowerDataFrameStage0 <- downsampling(3,0)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
bandPowerDataFrameStage0 <- downsampling(3,0)
bandPowerDataFrameStage1 <- downsampling(3,1)
bandPowerDataFrameStage2 <- downsampling(3,2)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
performanceMetricFrameStage1     <- downsampling(4,1)
performanceMetricDataFrameStage2 <- downsampling(4,2)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
performanceMetricFrameStage1     <- downsampling(4,1)
performanceMetricDataFrameStage2 <- downsampling(4,2)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
performanceMetricFrameStage1     <- downsampling(4,1)
performanceMetricDataFrameStage2 <- downsampling(4,2)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
#   5.1 Downsampling/Upsampling
pagesQualityParametersStage1 <- downsampling(5,1)
pagesQualityParametersStage2 <- downsampling(5,2)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
pagesQualityParametersStage2 <- downsampling(5,2)
View(rawQualityParametersPages28114DataFrameStage1)
pagesQualityParametersStage1 <- downsampling(5,1)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE,
fix.empty.names = TRUE, stringsAsFactors = FALSE)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
pagesQualityParametersStage2 <- downsampling(5,2)
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
eyeTrackingInformationStage0 <- downsampling(5,0)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#   6.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
eyeTrackingInformationStage0 <- downsampling(6,0)
eyeTrackingInformationStage1 <- downsampling(6,1)
eyeTrackingInformationStage2 <- downsampling(6,2)
