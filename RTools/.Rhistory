#   7.1 create quality dataframe for all probands to calc. the validityscore
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
#   8.1 create quality dataframe for all probands to calc. the validityscore
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#--------------------------------------------------
# 10. Data-Fusion of one Participant
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- paste("participent_", id, "_DataFrame", sep="") #'participent_'+ as.character(id) + '_DataFrame'
# call fuseParticipentDataFrames
assign(participent_variable_name, fuseParticipentDataFrames(id, condition, 1))
# filter duplicates
assign(participent_variable_name, unique(get(participent_variable_name)))
# print filter log
participent_Log <- duplicated(get(participent_variable_name))
print(participent_Log)
assign(participent_variable_name, get(participent_variable_name) %>% distinct(time, .keep_all = TRUE))
# 10.1 add participent id to dataframe
nRows <- nrow(get(participent_variable_name))
tempDataFrame <- NULL
tempDataFrame <- data.frame(pId = character())
tempDataFrame[1:nRows,] <- id
tempDataFrame <- cbind(tempDataFrame, get(participent_variable_name))
assign(participent_variable_name, tempDataFrame)
# cleanup
rm(pagesTIMESUMsStage1Temp)
rm(pagesQualityParametersStage1)
rm(pagesQualityParametersStage2)
rm(rawVRQuestionnaireToolkitSSQDataFrameStage2)
rm(rawVRQuestionnaireToolkitUncannyValleyDataFrameStage1)
rm(bandPowerDataFrameStage0)
rm(bandPowerDataFrameStage1)
rm(bandPowerDataFrameStage2)
rm(performanceMetricDataFrameStage0)
rm(performanceMetricDataFrameStage1)
rm(performanceMetricDataFrameStage2)
rm(eyeTrackingInformationStage0)
rm(eyeTrackingInformationStage1)
rm(eyeTrackingInformationStage2)
rm(rawTrackingData)
rm(tempDataFrame)
rm(transformedBitalinoECGDataFrameStage0)
rm(transformedBitalinoECGDataFrameStage1)
rm(transformedBitalinoECGDataFrameStage2)
rm(transformedBitalinoEDADataFrameStage0)
rm(transformedBitalinoEDADataFrameStage1)
rm(transformedBitalinoEDADataFrameStage2)
# some misc cleanup
rm(nRows)
rm(countRows)
rm(participent_Log)
}
#   10.2 Complete data frame
if (!(is.null(pagesTIMESUMsStage1)) && nrow(pagesTIMESUMsStage1) == condition_length) {
source("EvaluateQualityParamtersAsValidityscore.r", echo=TRUE)
pagesTIMESUMsStage1 <- EvaluateTimeRsi()
}
c_index <- 1
for (cid in condition_list){
dataframe_name <- paste("participent_", cid, "_DataFrame", sep="")
tempDataFrame <- get(dataframe_name)
tempDataFrame$TIMERSICalc   <- pagesTIMESUMsStage1$TIME_RSI[c_index]
tempDataFrame$MISSRELCalc   <- pagesTIMESUMsStage1$MISSREL[c_index]
tempDataFrame$MEDIANForTRSI <- pagesTIMESUMsStage1$MEDIANForTRSI[c_index]
assign(dataframe_name, tempDataFrame)
c_index <- c_index + 1
}
#   10.3 Filter data frame and complete with missing values
for (cid in condition_list){
dataframe_name <- paste("participent_", cid, "_DataFrame", sep="")
tempDataFrame <- get(dataframe_name)
# delete "NA" rows
tempDataFrame <- na.omit(tempDataFrame)
# convert from bool to numeric
numberOfRows <- nrow(tempDataFrame)
if ( tempDataFrame$DEG_TIME[numberOfRows] > 0 && tempDataFrame$DEG_TIME[numberOfRows] >= tempDataFrame$DegTimeThreshold[numberOfRows]){
tempDataFrame$DegTimeLowQuality = 1
}else {
tempDataFrame$DegTimeLowQuality = 0
}
tempDataFrame$DegTimeLowQuality <- as.numeric(tempDataFrame$DegTimeLowQuality)
# remove known columns with zeros
tempDataFrame$MISSING     <- NULL
tempDataFrame$TIME_RSI    <- NULL
tempDataFrame$MISSRELCalc <- NULL
# calculate tatal features again, while there is a bug
# TotalFixationCounter
tempDataFrame$TotalFixationCounter[1] <- tempDataFrame$FixationCounter[1]
# TotalFixationDuration
tempDataFrame$TotalFixationDuration[1] <- tempDataFrame$FixationDuration[1]
# SaccadeCounter
tempColumn <- tempDataFrame$SaccadeCounter
tempDataFrame$SaccadeCounter <- 0
#tempDataFrame$SaccadeCounter[1] <- 0
for(i in 2:nrow(tempDataFrame)) {
tempDataFrame$TotalFixationCounter[i] <- tempDataFrame$TotalFixationCounter[i-1] + tempDataFrame$FixationCounter[i]
tempDataFrame$TotalFixationDuration[i] <- tempDataFrame$TotalFixationDuration[i-1] + tempDataFrame$FixationDuration[i]
tempDataFrame$SaccadeCounter[i] <- tempDataFrame$SaccadeCounter[i-1] + (tempColumn[i] - tempColumn[i-1])
}
# pupilometry change of pupil diameter over time in seconds
# LeftEyeOpenness, RightEyeOpenness
# LeftPupilDiameter, RightPupilDiameter
#
# Book: Advances in Artificial Intelligence and Applied Cognitive Computing
# Subchapter: 2.1 TEPR, p. 1057
# Content: It was found that changes in pupil diameter size evoked by light reflexes can be described as large (up to a few millimeters), while those evoked by
# cognitive activity happen to be relatively small (usually between 0.1 and 0.5 mm) and rapid [1].
leftMeanPupilDiameter <- mean(tempDataFrame$LeftPupilDiameter)
rightMeanPupilDiameter <- mean(tempDataFrame$RightPupilDiameter)
tempDataFrame$LightReflexesLeftPupilDiamter     <- 0
tempDataFrame$CognitiveActivityLeftPupilDiamter <- 0
tempDataFrame$LeftMeanPupilDiameter             <- leftMeanPupilDiameter
tempDataFrame$LeftPupilDiameterDifferenceToMean[1] <- tempDataFrame$LeftPupilDiameter[1] - leftMeanPupilDiameter
tempDataFrame$LightReflexesRightPupilDiamter        <- 0
tempDataFrame$CognitiveActivityRightPupilDiamter    <- 0
tempDataFrame$RightMeanPupilDiameter                <- rightMeanPupilDiameter
tempDataFrame$RightPupilDiameterDifferenceToMean[1] <- tempDataFrame$RightPupilDiameter[1] - rightMeanPupilDiameter
for(i in 2:nrow(tempDataFrame)) {
leftDifference <- abs(tempDataFrame$LeftPupilDiameter[i-1] - tempDataFrame$LeftPupilDiameter[i])
if(leftDifference > 0.5){
tempDataFrame$LightReflexesLeftPupilDiamter[i] <- leftDifference
} else {
tempDataFrame$CognitiveActivityLeftPupilDiamter[i] <- leftDifference
}
rightDifference <- abs(tempDataFrame$RightPupilDiameter[i-1] - tempDataFrame$RightPupilDiameter[i])
if(rightDifference > 0.5){
tempDataFrame$LightReflexesRightPupilDiamter[i] <- rightDifference
} else {
tempDataFrame$CognitiveActivityRightPupilDiamter[i] <- rightDifference
}
tempDataFrame$LeftPupilDiameterDifferenceToMean[i]  <- tempDataFrame$LeftPupilDiameter[i]  - leftMeanPupilDiameter
tempDataFrame$RightPupilDiameterDifferenceToMean[i] <- tempDataFrame$RightPupilDiameter[i] - rightMeanPupilDiameter
}
assign(dataframe_name, tempDataFrame)
}
#   10.4 Save data frames as backup
path <- file.path(condition,  "RResults", "/")
pathCSV <- file.path(path,  "PagesTIMESUMsStage1_DataFrame.csv", "")
pathTXT <- file.path(path,  "PagesTIMESUMsStage1_DataFrame.txt", "")
write.csv2(pagesTIMESUMsStage1, pathCSV, row.names = FALSE)
write.table(pagesTIMESUMsStage1, pathTXT, sep=" # ", row.names=FALSE)
View(pagesTIMESUMsStage1)
for (cid in condition_list){
dataframe_name <- paste("participent_", cid, "_DataFrame", sep="")
file_name_csv <- paste(dataframe_name, ".csv", sep="")
file_name_txt <- paste(dataframe_name, ".txt", sep="")
pathCSV <- file.path(path,  file_name_csv, "")
pathTXT <- file.path(path,  file_name_txt, "")
tempDataFrame <- get(dataframe_name)
write.csv2(tempDataFrame, pathCSV, row.names = FALSE)
write.table(tempDataFrame, pathTXT, sep=" # ", row.names=FALSE)
}
all_participent_dataframe <- NULL
for (cid in condition_list){
dataframe_name <- paste("participent_", cid, "_DataFrame", sep="")
if (is.null(all_participent_dataframe)){
all_participent_dataframe <- get(dataframe_name)
} else {
all_participent_dataframe <- rbind(all_participent_dataframe, get(dataframe_name))
}
}
path <- file.path(condition,  "RResults", "/")
pathCSV <- file.path(path,  "All_Participents_DataFrame.csv", "")
write.csv2(all_participent_dataframe, pathCSV, row.names = FALSE)
pathTXT <- file.path(path,  "All_Participents_DataFrame.txt", "")
write.table(all_participent_dataframe, pathTXT, sep=" # ", row.names=FALSE)
id <- NULL
condition <- NULL
rm(all_pariticipent_dataframe)
rm(all_participent_dataframe)
rm(transformedBitalinoEDASiemensDataFrameStage0)
rm(transformedBitalinoEDASiemensDataFrameStage1)
rm(transformedBitalinoEDASiemensDataFrameStage2)
rm(pagesTIMESUMsStage1)
rm(tempDataFrame)
for (cid in condition_list){
dataframe_name <- paste("participent_", cid, "_DataFrame", sep="")
remove(list=c(dataframe_name))
}
rm(c_index)
rm(lastRow)
rm(file_name_csv)
rm(dataframe_name)
rm(file_name_txt)
rm(participent_variable_name)
rm(path)
rm(pathCSV)
rm(pathTXT)
rm(i)
rm(id)
rm(id_)
rm(leftDifference)
rm(leftMeanPupilDiameter)
rm(numberOfRows)
rm(rightDifference)
rm(rightMeanPupilDiameter)
rm(tempColumn)
rm(cid)
# 12 Fuse all conditions dataframes
conditionADataFrame <- read.csv2(file = "./Condition A/RResults/All_Participents_DataFrame.csv")
conditionBDataFrame <- read.csv2(file = "./Condition B/RResults/All_Participents_DataFrame.csv")
conditionBDataFrame <- read.csv2(file = "./Condition C/RResults/All_Participents_DataFrame.csv")
all_participent_dataframe <- conditionADataFrame
# 12 Fuse all conditions dataframes
conditionADataFrame <- read.csv2(file = "./Condition A/RResults/All_Participents_DataFrame.csv")
conditionBDataFrame <- read.csv2(file = "./Condition B/RResults/All_Participents_DataFrame.csv")
conditionCDataFrame <- read.csv2(file = "./Condition C/RResults/All_Participents_DataFrame.csv")
all_participent_dataframe <- conditionADataFrame
all_participent_dataframe <- rbind(all_participent_dataframe, conditionBDataFrame)
all_participent_dataframe <- rbind(all_participent_dataframe, conditionCDataFrame)
temp_dataframe <- all_participent_dataframe
# all cells with "NA" = 0
#temp_dataframe <- replace(temp_dataframe, is.na(temp_dataframe), 0)
# all rows with "NA" to cut out
temp_dataframe <- na.omit(temp_dataframe)
# clean ids -> only numbers
temp_dataframe$pId <- str_replace(temp_dataframe$pId, "id-", "")
temp_dataframe$pId <- str_replace(temp_dataframe$pId, "b", "")
# switch time and id
numberOfColumns <- ncol(temp_dataframe)
temp_dataframe <- temp_dataframe[, c(2,1,3:numberOfColumns)]
# remove strings
temp_dataframe <- subset(temp_dataframe, select=-c(lex, STARTED, LASTDATA, MAXPAGE, DegTimeThreshold, DegTimeThresholdForOnePage, DegTimeValueForOnePage)) # MAXPAGE is optional
# convert all columns to numeric
numberOfColumns <- ncol(temp_dataframe)
temp_dataframe[,1:numberOfColumns] <- lapply(temp_dataframe[,1:numberOfColumns], function (x) as.numeric(x))
# list <- sapply(temp_dataframe, class)
write.csv2(temp_dataframe, "./All_Participents_DataFrame.csv", row.names = FALSE)
rm(all_participent_dataframe)
rm(conditionADataFrame)
rm(conditionBDataFrame)
rm(temp_dataframe)
rm(list)
# Conditions Ids:
# A -> id-1, id-2, id-3, id-4, id-5, id-6, id-7, id-10, (id-42 eeg-quality 0%) => 8 (9) Participents
#condition_list <- c("id-1", "id-2", "id-3", "id-4", "id-5", "id-6", "id-7", "id-10")
# B -> id-13, id-14, id-15, id-16, id-17b, id-18, id-19, id-20, id-31, id-34, (id-25) 0 => optional participent because subjective it was a none-conscientious
condition_list <- c("id-13", "id-14", "id-15", "id-16", "id-17b", "id-18", "id-19", "id-20", "id-31", "id-34")
condition <- 'Condition A'
condition_list <- NULL
if (str_detect(condition, "Condition A")){
# Conditions Ids:
# A -> id-1, id-2, id-3, id-4, id-5, id-6, id-7, id-10, (id-42 eeg-quality 0%) => 8 (9) Participents
condition_list <- c("id-1", "id-2", "id-3", "id-4", "id-5", "id-6", "id-7", "id-10")
} else if (str_detect(condition, "Condition B")){
# B -> id-13, id-14, id-15, id-16, id-17b, id-18, id-19, id-20, id-31, id-34, (id-25) 0 => optional participent because subjective it was a none-conscientious
condition_list <- c("id-13", "id-14", "id-15", "id-16", "id-17b", "id-18", "id-19", "id-20", "id-31", "id-34")
#condition_list <- c("id-13", "id-17b", "id-18", "id-19", "id-20", "id-31", "id-34")
} else if (str_detect(condition, "Condition C")){
# C -> id-21, id-22, id-22, id-23, id-24, id-25, id-26, id-27, id-28, id-29
condition_list <- c("id-21", "id-22", "id-23", "id-24", "id-25", "id-26", "id-27", "id-28", "id-29")
}
condition_length <- length(condition_list)
rm(conditionCDataFrame)
condition_length <- length(condition_list)
#condition <- 'Condition B'
path <- file.path(condition,  "RResults", "/")
All_Participents_Mean_DataFrame <- NULL
for (cid in condition_list){
dataframe_name <- paste("participent_", cid, "_DataFrame", sep="")
file_name <- paste (dataframe_name, ".csv", sep="")
pathCSV <- file.path(path,  file_name, "")
temp_dataframe <- read.csv2(file = pathCSV)
# alls cells with "NA" = 0
#temp_dataframe <- replace(temp_dataframe, is.na(temp_dataframe), 0)
# all rows with "NA" to cut out
temp_dataframe <- na.omit(temp_dataframe)
# clean ids -> only numbers
temp_dataframe$pId <- str_replace(temp_dataframe$pId, "id-", "")
temp_dataframe$pId <- str_replace(temp_dataframe$pId, "b", "")
# switch time and id
numberOfColumns <- ncol(temp_dataframe)
temp_dataframe <- temp_dataframe[, c(2,1,3:numberOfColumns)] # leave the row index blank to keep all rows
# remove strings
temp_dataframe <- subset(temp_dataframe, select=-c(lex, STARTED, LASTDATA, MAXPAGE, DegTimeThreshold, DegTimeThresholdForOnePage, DegTimeValueForOnePage)) # MAXPAGE is optional
# convert all columns to numeric
numberOfColumns <- ncol(temp_dataframe)
temp_dataframe[,1:numberOfColumns] <- lapply(temp_dataframe[,1:numberOfColumns], function (x) as.numeric(x))
meanArray <- colMeans(temp_dataframe)
temp_df <- data.frame(matrix(0, ncol = length(meanArray), nrow = 0))
temp_df <- rbind(temp_df, meanArray)
colnames(temp_df) <- colnames(temp_dataframe)
if(is.null(All_Participents_Mean_DataFrame)){
All_Participents_Mean_DataFrame <- temp_df
}else{
All_Participents_Mean_DataFrame <- rbind(All_Participents_Mean_DataFrame, temp_df)
}
}
path <- file.path(condition,  "RResults", "/")
path_file <- file.path(path,  "All_Participents_Mean_DataFrame.csv", "")
write.csv2(All_Participents_Mean_DataFrame, path_file, row.names = FALSE)
condition <- 'Condition B'
condition_list <- NULL
if (str_detect(condition, "Condition A")){
# Conditions Ids:
# A -> id-1, id-2, id-3, id-4, id-5, id-6, id-7, id-10, (id-42 eeg-quality 0%) => 8 (9) Participents
condition_list <- c("id-1", "id-2", "id-3", "id-4", "id-5", "id-6", "id-7", "id-10")
} else if (str_detect(condition, "Condition B")){
# B -> id-13, id-14, id-15, id-16, id-17b, id-18, id-19, id-20, id-31, id-34, (id-25) 0 => optional participent because subjective it was a none-conscientious
condition_list <- c("id-13", "id-14", "id-15", "id-16", "id-17b", "id-18", "id-19", "id-20", "id-31", "id-34")
#condition_list <- c("id-13", "id-17b", "id-18", "id-19", "id-20", "id-31", "id-34")
} else if (str_detect(condition, "Condition C")){
# C -> id-21, id-22, id-22, id-23, id-24, id-25, id-26, id-27, id-28, id-29
condition_list <- c("id-21", "id-22", "id-23", "id-24", "id-25", "id-26", "id-27", "id-28", "id-29")
}
condition_length <- length(condition_list)
#condition <- 'Condition B'
path <- file.path(condition,  "RResults", "/")
All_Participents_Mean_DataFrame <- NULL
for (cid in condition_list){
dataframe_name <- paste("participent_", cid, "_DataFrame", sep="")
file_name <- paste (dataframe_name, ".csv", sep="")
pathCSV <- file.path(path,  file_name, "")
temp_dataframe <- read.csv2(file = pathCSV)
# alls cells with "NA" = 0
#temp_dataframe <- replace(temp_dataframe, is.na(temp_dataframe), 0)
# all rows with "NA" to cut out
temp_dataframe <- na.omit(temp_dataframe)
# clean ids -> only numbers
temp_dataframe$pId <- str_replace(temp_dataframe$pId, "id-", "")
temp_dataframe$pId <- str_replace(temp_dataframe$pId, "b", "")
# switch time and id
numberOfColumns <- ncol(temp_dataframe)
temp_dataframe <- temp_dataframe[, c(2,1,3:numberOfColumns)] # leave the row index blank to keep all rows
# remove strings
temp_dataframe <- subset(temp_dataframe, select=-c(lex, STARTED, LASTDATA, MAXPAGE, DegTimeThreshold, DegTimeThresholdForOnePage, DegTimeValueForOnePage)) # MAXPAGE is optional
# convert all columns to numeric
numberOfColumns <- ncol(temp_dataframe)
temp_dataframe[,1:numberOfColumns] <- lapply(temp_dataframe[,1:numberOfColumns], function (x) as.numeric(x))
meanArray <- colMeans(temp_dataframe)
temp_df <- data.frame(matrix(0, ncol = length(meanArray), nrow = 0))
temp_df <- rbind(temp_df, meanArray)
colnames(temp_df) <- colnames(temp_dataframe)
if(is.null(All_Participents_Mean_DataFrame)){
All_Participents_Mean_DataFrame <- temp_df
}else{
All_Participents_Mean_DataFrame <- rbind(All_Participents_Mean_DataFrame, temp_df)
}
}
path <- file.path(condition,  "RResults", "/")
path_file <- file.path(path,  "All_Participents_Mean_DataFrame.csv", "")
write.csv2(All_Participents_Mean_DataFrame, path_file, row.names = FALSE)
condition <- 'Condition C'
condition_list <- NULL
if (str_detect(condition, "Condition A")){
# Conditions Ids:
# A -> id-1, id-2, id-3, id-4, id-5, id-6, id-7, id-10, (id-42 eeg-quality 0%) => 8 (9) Participents
condition_list <- c("id-1", "id-2", "id-3", "id-4", "id-5", "id-6", "id-7", "id-10")
} else if (str_detect(condition, "Condition B")){
# B -> id-13, id-14, id-15, id-16, id-17b, id-18, id-19, id-20, id-31, id-34, (id-25) 0 => optional participent because subjective it was a none-conscientious
condition_list <- c("id-13", "id-14", "id-15", "id-16", "id-17b", "id-18", "id-19", "id-20", "id-31", "id-34")
#condition_list <- c("id-13", "id-17b", "id-18", "id-19", "id-20", "id-31", "id-34")
} else if (str_detect(condition, "Condition C")){
# C -> id-21, id-22, id-22, id-23, id-24, id-25, id-26, id-27, id-28, id-29
condition_list <- c("id-21", "id-22", "id-23", "id-24", "id-25", "id-26", "id-27", "id-28", "id-29")
}
condition_length <- length(condition_list)
#condition <- 'Condition B'
path <- file.path(condition,  "RResults", "/")
All_Participents_Mean_DataFrame <- NULL
for (cid in condition_list){
dataframe_name <- paste("participent_", cid, "_DataFrame", sep="")
file_name <- paste (dataframe_name, ".csv", sep="")
pathCSV <- file.path(path,  file_name, "")
temp_dataframe <- read.csv2(file = pathCSV)
# alls cells with "NA" = 0
#temp_dataframe <- replace(temp_dataframe, is.na(temp_dataframe), 0)
# all rows with "NA" to cut out
temp_dataframe <- na.omit(temp_dataframe)
# clean ids -> only numbers
temp_dataframe$pId <- str_replace(temp_dataframe$pId, "id-", "")
temp_dataframe$pId <- str_replace(temp_dataframe$pId, "b", "")
# switch time and id
numberOfColumns <- ncol(temp_dataframe)
temp_dataframe <- temp_dataframe[, c(2,1,3:numberOfColumns)] # leave the row index blank to keep all rows
# remove strings
temp_dataframe <- subset(temp_dataframe, select=-c(lex, STARTED, LASTDATA, MAXPAGE, DegTimeThreshold, DegTimeThresholdForOnePage, DegTimeValueForOnePage)) # MAXPAGE is optional
# convert all columns to numeric
numberOfColumns <- ncol(temp_dataframe)
temp_dataframe[,1:numberOfColumns] <- lapply(temp_dataframe[,1:numberOfColumns], function (x) as.numeric(x))
meanArray <- colMeans(temp_dataframe)
temp_df <- data.frame(matrix(0, ncol = length(meanArray), nrow = 0))
temp_df <- rbind(temp_df, meanArray)
colnames(temp_df) <- colnames(temp_dataframe)
if(is.null(All_Participents_Mean_DataFrame)){
All_Participents_Mean_DataFrame <- temp_df
}else{
All_Participents_Mean_DataFrame <- rbind(All_Participents_Mean_DataFrame, temp_df)
}
}
path <- file.path(condition,  "RResults", "/")
path_file <- file.path(path,  "All_Participents_Mean_DataFrame.csv", "")
write.csv2(All_Participents_Mean_DataFrame, path_file, row.names = FALSE)
# 12.4.2 create complete fuse mean data frame all participants
conditionAMeanDataFrame <- read.csv2(file = "./Condition A/RResults/All_Participents_Mean_DataFrame.csv")
conditionBMeanDataFrame <- read.csv2(file = "./Condition B/RResults/All_Participents_Mean_DataFrame.csv")
conditionCMeanDataFrame <- read.csv2(file = "./Condition C/RResults/All_Participents_Mean_DataFrame.csv")
all_participent_Mean_dataframes <- conditionAMeanDataFrame
all_participent_Mean_dataframes <- rbind(all_participent_Mean_dataframes, conditionBMeanDataFrame)
all_participent_Mean_dataframes <- rbind(all_participent_Mean_dataframes, conditionCMeanDataFrame)
write.csv2(all_participent_Mean_dataframes, "All_Participents_Mean_DataFrame.csv", row.names = FALSE)
#### conscientious
# ===================================
# manuell clustert (0 = conscientious, 1 = none-conscientious)
# =======
# read csv file as data frame
allConscientiousFeaturesTrackedFromStage1 <- read.csv2(file = './Condition A/RResults/All_Participents_DataFrame.csv')
allNoneConscientiousFeaturesTrackedFromStage1 <- read.csv2(file = './Condition B/RResults/All_Participents_DataFrame.csv')
allFeaturesTrackedFromStage1 <- read.csv2(file = 'All_Participents_DataFrame.csv')
temp <- allConscientiousFeaturesTrackedFromStage1
temp$theta <- temp$AF3.theta + temp$F7.theta + temp$F3.theta + temp$FC5.theta + temp$T7.theta + temp$P7.theta + temp$O1.theta + temp$O2.theta + temp$P8.theta + temp$T8.theta + temp$AF4.theta + temp$F8.theta + temp$F4.theta + temp$FC6.theta
temp$alpha <- temp$AF3.alpha + temp$F7.alpha + temp$F3.alpha + temp$FC5.alpha + temp$T7.alpha + temp$P7.alpha + temp$O1.alpha + temp$O2.alpha + temp$P8.alpha + temp$T8.alpha + temp$AF4.alpha + temp$F8.alpha + temp$F4.alpha + temp$FC6.alpha
temp$betaL <- temp$AF3.betaL + temp$F7.betaL + temp$F3.betaL + temp$FC5.betaL + temp$T7.betaL + temp$P7.betaL + temp$O1.betaL + temp$O2.betaL + temp$P8.betaL + temp$T8.betaL + temp$AF4.betaL + temp$F8.betaL + temp$F4.betaL + temp$FC6.betaL
temp$betaH <- temp$AF3.betaH + temp$F7.betaH + temp$F3.betaH + temp$FC5.betaH + temp$T7.betaH + temp$P7.betaH + temp$O1.betaH + temp$O2.betaH + temp$P8.betaH + temp$T8.betaH + temp$AF4.betaH + temp$F8.betaH + temp$F4.betaH + temp$FC6.betaH
temp$gamma <- temp$AF3.gamma + temp$F7.gamma + temp$F3.gamma + temp$FC5.gamma + temp$T7.gamma + temp$P7.gamma + temp$O1.gamma + temp$O2.gamma + temp$P8.gamma + temp$T8.gamma + temp$AF4.gamma + temp$F8.gamma + temp$F4.gamma + temp$FC6.gamma
allConscientiousFeaturesTrackedFromStage1 <- temp
# using packages
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(broom)
library(AICcmodavg)
barplot(colSums(allConscientiousFeaturesTrackedFromStage1[,120:125]))
barplot(colSums(allConscientiousFeaturesTrackedFromStage1[,121:125]))
temp <- allNoneConscientiousFeaturesTrackedFromStage1
temp$theta <- temp$AF3.theta + temp$F7.theta + temp$F3.theta + temp$FC5.theta + temp$T7.theta + temp$P7.theta + temp$O1.theta + temp$O2.theta + temp$P8.theta + temp$T8.theta + temp$AF4.theta + temp$F8.theta + temp$F4.theta + temp$FC6.theta
temp$alpha <- temp$AF3.alpha + temp$F7.alpha + temp$F3.alpha + temp$FC5.alpha + temp$T7.alpha + temp$P7.alpha + temp$O1.alpha + temp$O2.alpha + temp$P8.alpha + temp$T8.alpha + temp$AF4.alpha + temp$F8.alpha + temp$F4.alpha + temp$FC6.alpha
temp$betaL <- temp$AF3.betaL + temp$F7.betaL + temp$F3.betaL + temp$FC5.betaL + temp$T7.betaL + temp$P7.betaL + temp$O1.betaL + temp$O2.betaL + temp$P8.betaL + temp$T8.betaL + temp$AF4.betaL + temp$F8.betaL + temp$F4.betaL + temp$FC6.betaL
temp$betaH <- temp$AF3.betaH + temp$F7.betaH + temp$F3.betaH + temp$FC5.betaH + temp$T7.betaH + temp$P7.betaH + temp$O1.betaH + temp$O2.betaH + temp$P8.betaH + temp$T8.betaH + temp$AF4.betaH + temp$F8.betaH + temp$F4.betaH + temp$FC6.betaH
temp$gamma <- temp$AF3.gamma + temp$F7.gamma + temp$F3.gamma + temp$FC5.gamma + temp$T7.gamma + temp$P7.gamma + temp$O1.gamma + temp$O2.gamma + temp$P8.gamma + temp$T8.gamma + temp$AF4.gamma + temp$F8.gamma + temp$F4.gamma + temp$FC6.gamma
allNoneConscientiousFeaturesTrackedFromStage1 <- temp
barplot(colSums(allNoneConscientiousFeaturesTrackedFromStage1[,121:125]))
allNoneFeaturesTrackedFromStage1 <- read.csv2(file = './Condition C/RResults/All_Participents_DataFrame.csv')
# Condition C
temp <- allNoneFeaturesTrackedFromStage1
temp$theta <- temp$AF3.theta + temp$F7.theta + temp$F3.theta + temp$FC5.theta + temp$T7.theta + temp$P7.theta + temp$O1.theta + temp$O2.theta + temp$P8.theta + temp$T8.theta + temp$AF4.theta + temp$F8.theta + temp$F4.theta + temp$FC6.theta
temp$alpha <- temp$AF3.alpha + temp$F7.alpha + temp$F3.alpha + temp$FC5.alpha + temp$T7.alpha + temp$P7.alpha + temp$O1.alpha + temp$O2.alpha + temp$P8.alpha + temp$T8.alpha + temp$AF4.alpha + temp$F8.alpha + temp$F4.alpha + temp$FC6.alpha
temp$betaL <- temp$AF3.betaL + temp$F7.betaL + temp$F3.betaL + temp$FC5.betaL + temp$T7.betaL + temp$P7.betaL + temp$O1.betaL + temp$O2.betaL + temp$P8.betaL + temp$T8.betaL + temp$AF4.betaL + temp$F8.betaL + temp$F4.betaL + temp$FC6.betaL
temp$betaH <- temp$AF3.betaH + temp$F7.betaH + temp$F3.betaH + temp$FC5.betaH + temp$T7.betaH + temp$P7.betaH + temp$O1.betaH + temp$O2.betaH + temp$P8.betaH + temp$T8.betaH + temp$AF4.betaH + temp$F8.betaH + temp$F4.betaH + temp$FC6.betaH
temp$gamma <- temp$AF3.gamma + temp$F7.gamma + temp$F3.gamma + temp$FC5.gamma + temp$T7.gamma + temp$P7.gamma + temp$O1.gamma + temp$O2.gamma + temp$P8.gamma + temp$T8.gamma + temp$AF4.gamma + temp$F8.gamma + temp$F4.gamma + temp$FC6.gamma
allNoneFeaturesTrackedFromStage1 <- temp
barplot(colSums(allNoneFeaturesTrackedFromStage1[,121:125]))
# Condition A-B-C
temp <- allFeaturesTrackedFromStage1
temp$theta <- temp$AF3.theta + temp$F7.theta + temp$F3.theta + temp$FC5.theta + temp$T7.theta + temp$P7.theta + temp$O1.theta + temp$O2.theta + temp$P8.theta + temp$T8.theta + temp$AF4.theta + temp$F8.theta + temp$F4.theta + temp$FC6.theta
temp$alpha <- temp$AF3.alpha + temp$F7.alpha + temp$F3.alpha + temp$FC5.alpha + temp$T7.alpha + temp$P7.alpha + temp$O1.alpha + temp$O2.alpha + temp$P8.alpha + temp$T8.alpha + temp$AF4.alpha + temp$F8.alpha + temp$F4.alpha + temp$FC6.alpha
temp$betaL <- temp$AF3.betaL + temp$F7.betaL + temp$F3.betaL + temp$FC5.betaL + temp$T7.betaL + temp$P7.betaL + temp$O1.betaL + temp$O2.betaL + temp$P8.betaL + temp$T8.betaL + temp$AF4.betaL + temp$F8.betaL + temp$F4.betaL + temp$FC6.betaL
temp$betaH <- temp$AF3.betaH + temp$F7.betaH + temp$F3.betaH + temp$FC5.betaH + temp$T7.betaH + temp$P7.betaH + temp$O1.betaH + temp$O2.betaH + temp$P8.betaH + temp$T8.betaH + temp$AF4.betaH + temp$F8.betaH + temp$F4.betaH + temp$FC6.betaH
temp$gamma <- temp$AF3.gamma + temp$F7.gamma + temp$F3.gamma + temp$FC5.gamma + temp$T7.gamma + temp$P7.gamma + temp$O1.gamma + temp$O2.gamma + temp$P8.gamma + temp$T8.gamma + temp$AF4.gamma + temp$F8.gamma + temp$F4.gamma + temp$FC6.gamma
allFeaturesTrackedFromStage1 <- temp
barplot(colSums(allFeaturesTrackedFromStage1[,121:125]))
barplot(colSums(allFeaturesTrackedFromStage1[,114:118]))
barplot(colSums(allNoneConscientiousFeaturesTrackedFromStage1[,121:125]))
barplot(colSums(allConscientiousFeaturesTrackedFromStage1[,121:125]))
barplot(colSums(allNoneFeaturesTrackedFromStage1[,121:125]))
eegHist<- allFeaturesTrackedFromStage1[1:rowCounter, c('theta', 'alpha', 'betaL', 'betaH', 'gamma')]
rowCounter <- nrow(allConscientiousFeaturesTrackedFromStage1)
rowNoneCounter <- nrow(allNoneConscientiousFeaturesTrackedFromStage1)
rowCounterAll <- nrow(allFeaturesTrackedFromStage1)
eegHist<- allFeaturesTrackedFromStage1[1:rowCounter, c('theta', 'alpha', 'betaL', 'betaH', 'gamma')]
par(las = 1) # all axis labels horizontal
boxplot(eegHist, main = "boxplot(*, horizontal = FALSE)", horizontal = FALSE)
#
hist.data.frame(eegHist)
library(Hmisc)
#
hist.data.frame(eegHist)
#
#hist.data.frame(eegHist)
#
ggplot(gather(eegHist, cols, value), aes(x = value)) + geom_histogram(binwidth = 20, bins=5 ) + facet_grid(.~cols)
eegHist<- allFeaturesTrackedFromStage1[rowCounter+1:rowNoneCounter, c('theta', 'alpha', 'betaL', 'betaH', 'gamma')]
#
par(las = 1) # all axis labels horizontal
boxplot(eegHist, main = "boxplot(*, horizontal = FALSE)", horizontal = FALSE)
#
ggplot(gather(eegHist, cols, value), aes(x = value)) + geom_histogram(binwidth = 20, bins=5 ) + facet_grid(.~cols)
eegHist<- allFeaturesTrackedFromStage1[, c('theta', 'alpha', 'betaL', 'betaH', 'gamma', 'Conscientious')]
#
#ggplot(eegHist, aes(x = Conscientious)) + geom_bar()
par(las = 1) # all axis labels horizontal
boxplot(eegHist, main = "boxplot(*, horizontal = FALSE)", horizontal = FALSE)
#
hist.data.frame(eegHist)
library(car)
library(ggstatsplot)
# gamma
ggbetweenstats(data = allFeaturesTrackedFromStage1, x = DegTimeLowQuality, y = gamma, type = "parametric", # ANOVA or Kruskal-Wallis
var.equal = TRUE, # ANOVA or Welch ANOVA
plot.type = "box", pairwise.comparisons = TRUE, pairwise.display = "significant", centrality.plotting = FALSE, bf.message = FALSE)
# betaH
ggbetweenstats(data = allFeaturesTrackedFromStage1, x = DegTimeLowQuality, y = betaH, type = "parametric", # ANOVA or Kruskal-Wallis
var.equal = TRUE, # ANOVA or Welch ANOVA
plot.type = "box", pairwise.comparisons = TRUE, pairwise.display = "significant", centrality.plotting = FALSE, bf.message = FALSE)
# HeartRate
ggbetweenstats(data = allFeaturesTrackedFromStage1, x = DegTimeLowQuality, y = HeartRate, type = "parametric", # ANOVA or Kruskal-Wallis
var.equal = TRUE, # ANOVA or Welch ANOVA
plot.type = "box", pairwise.comparisons = TRUE, pairwise.display = "significant", centrality.plotting = FALSE, bf.message = FALSE)
# CognitiveActivityRightPupilDiamter
ggbetweenstats(data = allFeaturesTrackedFromStage1, x = DegTimeLowQuality, y = CognitiveActivityRightPupilDiamter, type = "parametric", # ANOVA or Kruskal-Wallis
var.equal = TRUE, # ANOVA or Welch ANOVA
plot.type = "box", pairwise.comparisons = TRUE, pairwise.display = "significant", centrality.plotting = FALSE, bf.message = FALSE)
# TotalFixationDuration
ggbetweenstats(data = allFeaturesTrackedFromStage1, x = DegTimeLowQuality, y = TotalFixationDuration, type = "parametric", # ANOVA or Kruskal-Wallis
var.equal = TRUE, # ANOVA or Welch ANOVA
plot.type = "box", pairwise.comparisons = TRUE, pairwise.display = "significant", centrality.plotting = FALSE, bf.message = FALSE)
# SaccadeCounter
ggbetweenstats(data = allFeaturesTrackedFromStage1, x = DegTimeLowQuality, y = SaccadeCounter, type = "parametric", # ANOVA or Kruskal-Wallis
var.equal = TRUE, # ANOVA or Welch ANOVA
plot.type = "box", pairwise.comparisons = TRUE, pairwise.display = "significant", centrality.plotting = FALSE, bf.message = FALSE)
write.csv2(allFeaturesTrackedFromStage1, "All_Participents_WaveSum_DataFrame.csv", row.names = FALSE)
