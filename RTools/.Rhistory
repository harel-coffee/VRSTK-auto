participent_13_DataFrame <- NULL
participent_13_DataFrame <- fuseParticipentDataFrames(id, condition, 1)
View(participent_13_DataFrame)
# automation build process
library(dplyr)
library(magrittr)
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoECGDataFrameStage0) <- c('time','HeartRate','RPeaks')
transformedBilinoECGDataFrameStage0 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoECGDataFrameStage1) <- c('time','HeartRate','RPeaks')
transformedBilinoECGDataFrameStage1 %<>% mutate_if(is.character, as.numeric)
transformedBilinoECGDataFrameStage1$time <- as.integer(transformedBilinoECGDataFrameStage1$time)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoECGDataFrameStage2) <- c('time','HeartRate','RPeaks')
transformedBilinoECGDataFrameStage2 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoEDADataFrameStage0) <- c('onsets','peaks','amps')
transformedBilinoEDADataFrameStage0 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoEDADataFrameStage1) <- c('onsets','peaks','amps')
transformedBilinoEDADataFrameStage1 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoEDADataFrameStage2) <- c('onsets','peaks','amps')
transformedBilinoEDADataFrameStage2 %<>% mutate_if(is.character, as.numeric)
}
}
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
bandPowerDataFrameStage0 <- downsampling(3,0)
bandPowerDataFrameStage1 <- downsampling(3,1)
bandPowerDataFrameStage2 <- downsampling(3,2)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
performanceMetricDataFrameStage1 <- downsampling(4,1)
performanceMetricDataFrameStage2 <- downsampling(4,2)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
pagesQualityParametersStage2 <- downsampling(5,2)
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
#   6.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
eyeTrackingInformationStage0 <- downsampling(6,0)
eyeTrackingInformationStage1 <- downsampling(6,1)
eyeTrackingInformationStage2 <- downsampling(6,2)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#--------------------------------------------------
# 10. Data-Fusion of one Participant
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_13_DataFrame <- NULL
participent_13_DataFrame <- fuseParticipentDataFrames(id, condition, 1)
View(participent_13_DataFrame)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
# automation build process
library(dplyr)
library(magrittr)
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoECGDataFrameStage0) <- c('time','HeartRate','RPeaks')
transformedBilinoECGDataFrameStage0 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoECGDataFrameStage1) <- c('time','HeartRate','RPeaks')
transformedBilinoECGDataFrameStage1 %<>% mutate_if(is.character, as.numeric)
transformedBilinoECGDataFrameStage1$time <- as.integer(transformedBilinoECGDataFrameStage1$time)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoECGDataFrameStage2) <- c('time','HeartRate','RPeaks')
transformedBilinoECGDataFrameStage2 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoEDADataFrameStage0) <- c('onsets','peaks','amps')
transformedBilinoEDADataFrameStage0 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoEDADataFrameStage1) <- c('onsets','peaks','amps')
transformedBilinoEDADataFrameStage1 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
colnames(transformedBilinoEDADataFrameStage2) <- c('onsets','peaks','amps')
transformedBilinoEDADataFrameStage2 %<>% mutate_if(is.character, as.numeric)
}
}
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
bandPowerDataFrameStage0 <- downsampling(3,0)
bandPowerDataFrameStage1 <- downsampling(3,1)
bandPowerDataFrameStage2 <- downsampling(3,2)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
performanceMetricDataFrameStage1 <- downsampling(4,1)
performanceMetricDataFrameStage2 <- downsampling(4,2)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
pagesQualityParametersStage2 <- downsampling(5,2)
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
#   6.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
eyeTrackingInformationStage0 <- downsampling(6,0)
eyeTrackingInformationStage1 <- downsampling(6,1)
eyeTrackingInformationStage2 <- downsampling(6,2)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#--------------------------------------------------
# 10. Data-Fusion of one Participant
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_13_DataFrame <- NULL
participent_13_DataFrame <- fuseParticipentDataFrames(id, condition, 1)
View(participent_13_DataFrame)
View(performanceMetricDataFrameStage1)
View(performanceMetricDataFrameStage0)
View(performanceMetricDataFrameStage2)
View(performanceMetricDataFrameStage1)
View(performanceMetricDataFrameStage2)
View(performanceMetricDataFrameStage1)
View(rawTrackingData)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
View(rawPerformanceMetricDataFrameStage1)
View(rawEmotivTrackingDataStage1)
#-------------- Stage 1
rawPerformanceMetricDataFrameStage1 <- NULL
rawPerformanceMetricDataFrameStage1Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage1)) {
rowTimeValue <- rawEmotivTrackingDataStage1$time[i]
rawPerformanceMetricValue <- rawEmotivTrackingDataStage1$PerformanceMetricsDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rawPerformanceMetricValue) && !is.na(rawPerformanceMetricValue) && !is.nan(rawPerformanceMetricValue) && length(rawPerformanceMetricValue) && rawPerformanceMetricValue != "")
{
splittedPerformanceMetricValue <- stringr::str_split(rawPerformanceMetricValue, ";")[[1]]
splittedPerformanceMetricValue <- stringr::str_replace(splittedPerformanceMetricValue, ",", ".")
if (is.null(rawPerformanceMetricDataFrameStage1))
{
rawPerformanceMetricDataFrameStage1 <- data.frame("time" = c(as.numeric(rowTimeValue)),
"eng" = c(as.numeric(rawPerformanceMetricValue[3])),
"exc" = c(as.numeric(rawPerformanceMetricValue[5])),
"lex" = c(as.numeric(rawPerformanceMetricValue[6])),
"str" = c(as.numeric(rawPerformanceMetricValue[8])),
"rel" = c(as.numeric(rawPerformanceMetricValue[10])),
"int" = c(as.numeric(rawPerformanceMetricValue[12])),
"foc" = c(as.numeric(rawPerformanceMetricValue[14])));
}
else
{
row <- c(as.numeric(rowTimeValue),
as.numeric(rawPerformanceMetricValue[3]),
as.numeric(rawPerformanceMetricValue[5]),
as.numeric(rawPerformanceMetricValue[6]),
as.numeric(rawPerformanceMetricValue[8]),
as.numeric(rawPerformanceMetricValue[10]),
as.numeric(rawPerformanceMetricValue[12]),
as.numeric(rawPerformanceMetricValue[14]));
rawPerformanceMetricDataFrameStage1Temp <- rawPerformanceMetricDataFrameStage1
rawPerformanceMetricDataFrameStage1Temp[nrow(rawPerformanceMetricDataFrameStage1) + 1, ] <- row
rawPerformanceMetricDataFrameStage1 <- rawPerformanceMetricDataFrameStage1Temp
}
}
}
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
performanceMetricDataFrameStage1 <- downsampling(4,1)
performanceMetricDataFrameStage2 <- downsampling(4,2)
View(rawPerformanceMetricDataFrameStage1)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
pagesQualityParametersStage2 <- downsampling(5,2)
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
#   6.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
eyeTrackingInformationStage0 <- downsampling(6,0)
eyeTrackingInformationStage1 <- downsampling(6,1)
eyeTrackingInformationStage2 <- downsampling(6,2)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#--------------------------------------------------
# 10. Data-Fusion of one Participant
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_13_DataFrame <- NULL
participent_13_DataFrame <- fuseParticipentDataFrames(id, condition, 1)
View(participent_13_DataFrame)
participent_13_DataFrame_temp <- duplicated(participent_13_DataFrame)
print(participent_13_DataFrame_temp)
participent_13_DataFrame <- unique(participent_13_DataFrame)
participent_13_DataFrame_temp <- duplicated(participent_13_DataFrame)
print(participent_13_DataFrame_temp)
participent_13_DataFrame <- unique(participent_13_DataFrame)
participent_13_DataFrame <- duplicated(participent_13_DataFrame)
print(participent_13_DataFrame_temp)
participent_13_DataFrame <- NULL
participent_13_DataFrame <- fuseParticipentDataFrames(id, condition, 1)
participent_13_Log <- unique(participent_13_DataFrame)
participent_13_Log <- duplicated(participent_13_DataFrame)
print(participent_13_Log)
participent_13_DataFrame <- unique(participent_13_DataFrame)
participent_13_Log <- duplicated(participent_13_DataFrame)
print(participent_13_Log)
View(participent_13_DataFrame)
participent_13_DataFrame <- participent_13_DataFrame %>% distinct(time, .keep_all = TRUE)
View(participent_13_DataFrame)
#--------------------------------------------------
# 10. Data-Fusion of one Participant
rm(participent_13_DataFrame)
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- 'participent_'+ id + '_DataFrame'
#--------------------------------------------------
# 10. Data-Fusion of one Participant
rm(participent_13_DataFrame)
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- 'participent_'+ as.character(id) + '_DataFrame'
#--------------------------------------------------
# 10. Data-Fusion of one Participant
rm(participent_13_DataFrame)
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- paste("participent_", as.character(id), "_DataFrame") #'participent_'+ as.character(id) + '_DataFrame'
#--------------------------------------------------
# 10. Data-Fusion of one Participant
rm(participent_13_DataFrame)
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- paste("participent_", id, "_DataFrame") #'participent_'+ as.character(id) + '_DataFrame'
#--------------------------------------------------
# 10. Data-Fusion of one Participant
rm(participent_13_DataFrame)
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- paste("participent_", id, "_DataFrame", sep="") #'participent_'+ as.character(id) + '_DataFrame'
assign(participent_variable_name, fuseParticipentDataFrames(id, condition, 1))
assign(participent_variable_name, unique(get(participent_variable_name)))
participent_Log <- duplicated(get(participent_variable_name))
print(participent_Log)
assign(participent_variable_name, get(participent_variable_name) %>% distinct(time, .keep_all = TRUE))
View(`participent_id-13_DataFrame`)
# add participent id to dataframe
countRows <- nrow(get(participent_variable_name))
tempDataFrame <- data.frame(pId = id)
View(tempDataFrame)
# add participent id to dataframe
countRows <- nrow(get(participent_variable_name))
tempDataFrame <- data.frame(pId = c(id))
# add participent id to dataframe
countRows <- nrow(get(participent_variable_name))
tempDataFrame <- data.frame(matrix(id, nrow = countRows, ncol = 1))
View(tempDataFrame)
# add participent id to dataframe
nRows <- nrow(get(participent_variable_name))
#tempDataFrame <- data.frame(matrix(id, nrow = countRows, ncol = 1))
tempDataFrame <- data.frame(pId = character())
tempDataFrame[1:nRows,] <- id
View(tempDataFrame)
# add participent id to dataframe
nRows <- nrow(get(participent_variable_name))
#tempDataFrame <- data.frame(matrix(id, nrow = countRows, ncol = 1))
tempDataFrame <- NULL
tempDataFrame <- data.frame(pId = character())
tempDataFrame[1:nRows,] <- id
cbind(tempDataFrame, get(participent_variable_name))
View(tempDataFrame)
View(`participent_id-13_DataFrame`)
# add participent id to dataframe
nRows <- nrow(get(participent_variable_name))
#tempDataFrame <- data.frame(matrix(id, nrow = countRows, ncol = 1))
tempDataFrame <- NULL
tempDataFrame <- data.frame(pId = character())
tempDataFrame[1:nRows,] <- id
tempDataFrame <- cbind(tempDataFrame, get(participent_variable_name))
View(tempDataFrame)
# add participent id to dataframe
nRows <- nrow(get(participent_variable_name))
#tempDataFrame <- data.frame(matrix(id, nrow = countRows, ncol = 1))
tempDataFrame <- NULL
tempDataFrame <- data.frame(pId = character())
tempDataFrame[1:nRows,] <- id
tempDataFrame <- cbind(tempDataFrame, get(participent_variable_name))
assign(participent_variable_name, tempDataFrame)
View(`participent_id-13_DataFrame`)
#--------------------------------------------------
# 11. Data-Fusion for all Probands
#all_pariticipent_dataframe <-
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
#--------------------------------------------------
# 11. Data-Fusion for all Probands
all_pariticipent_dataframe <- get(participent_variable_name)
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
#--------------------------------------------------
# 11. Data-Fusion for all Probands
all_pariticipent_dataframe <- NULL
#--------------------------------------------------
# 11. Data-Fusion for all Probands
#all_pariticipent_dataframe <- NULL
rm(all_pariticipent_dataframe)
#--------------------------------------------------
# 11. Data-Fusion for all Probands
# all_pariticipent_dataframe <- NULL
# rm(all_pariticipent_dataframe)
if (rlang::is_environment(all_pariticipent_dataframe))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
}
#--------------------------------------------------
# 11. Data-Fusion for all Probands
# all_pariticipent_dataframe <- NULL
# rm(all_pariticipent_dataframe)
rm(nRows)
rm(countRows)
rm(participent_13_DataFrame_temp)
rm(participent_13_Log)
rm(participent_Log)
#--------------------------------------------------
# 11. Data-Fusion for all Probands
# all_pariticipent_dataframe <- NULL
# rm(all_pariticipent_dataframe)
rm(nRows)
rm(countRows)
rm(participent_13_DataFrame_temp)
rm(participent_13_Log)
rm(participent_Log)
if (exists(all_pariticipent_dataframe))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
} else
{
all_pariticipent_dataframe <- get(participent_variable_name)
}
all_pariticipent_dataframe
if (exists(all_pariticipent_dataframe))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
} else
{
all_pariticipent_dataframe <- get(participent_variable_name)
}
if (exists("all_pariticipent_dataframe", mode = "environment"))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
} else
{
all_pariticipent_dataframe <- get(participent_variable_name)
}
if (exists("all_pariticipent_dataframe", mode = "environment"))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
} else
{
all_pariticipent_dataframe <- get(participent_variable_name)
}
if (exists("all_pariticipent_dataframe", mode = "environment"))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
} else
{
all_pariticipent_dataframe <- get(participent_variable_name)
}
getEnv(all_pariticipent_dataframe)
#getEnv(all_pariticipent_dataframe)
exists("all_pariticipent_dataframe", mode = "environment")
#getEnv(all_pariticipent_dataframe)
exists(all_pariticipent_dataframe, mode = "environment")
#getEnv(all_pariticipent_dataframe)
exists("all_pariticipent_dataframe", where="environment", mode = "environment")
where("all_pariticipent_dataframe")
library(pryr)
#getEnv(all_pariticipent_dataframe)
existsEnvVariable("all_pariticipent_dataframe")
existsEnvVariable <-function(variablename) {
#print(ls(env=globalenv()))
return(1==length(ls(pattern=paste("^",variablename,"$",sep=""),env=globalenv())))
}
#getEnv(all_pariticipent_dataframe)
existsEnvVariable("all_pariticipent_dataframe")
#getEnv(all_pariticipent_dataframe)
rm(all_pariticipent_dataframe)
existsEnvVariable("all_pariticipent_dataframe")
# Source: https://stackoverflow.com/questions/9368900/how-to-check-if-object-variable-is-defined-in-r
existsEnvVariable <-function(name) {
return(1==length(ls(pattern=paste("^", name, "$", sep=""), env=globalenv())))
}
if (existsEnvVariable("all_pariticipent_dataframe"))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
} else
{
all_pariticipent_dataframe <- get(participent_variable_name)
}
if (existsEnvVariable("all_pariticipent_dataframe"))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
} else
{
all_pariticipent_dataframe <- get(participent_variable_name)
}
# Source: https://stackoverflow.com/questions/9368900/how-to-check-if-object-variable-is-defined-in-r
existsEnvVariable <-function(name) {
return(1==length(ls(pattern=paste("^", name, "$", sep=""), env=globalenv())))
}
if (existsEnvVariable("all_pariticipent_dataframe"))
{
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, get(participent_variable_name))
} else
{
all_pariticipent_dataframe <- get(participent_variable_name)
}
rm(all_pariticipent_dataframe)
