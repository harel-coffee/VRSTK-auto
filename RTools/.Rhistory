rawBandPowerDataFrameStage1 <- tempDataFrame
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedBandPowerValues[2]), as.numeric(splittedBandPowerValues[3]), as.numeric(splittedBandPowerValues[4]), as.numeric(splittedBandPowerValues[5]), as.numeric(splittedBandPowerValues[6]),
as.numeric(splittedBandPowerValues[7]),  as.numeric(splittedBandPowerValues[8]),  as.numeric(splittedBandPowerValues[9]),  as.numeric(splittedBandPowerValues[10]), as.numeric(splittedBandPowerValues[11]),
as.numeric(splittedBandPowerValues[12]), as.numeric(splittedBandPowerValues[13]), as.numeric(splittedBandPowerValues[14]), as.numeric(splittedBandPowerValues[15]), as.numeric(splittedBandPowerValues[16]),
as.numeric(splittedBandPowerValues[17]), as.numeric(splittedBandPowerValues[18]), as.numeric(splittedBandPowerValues[19]), as.numeric(splittedBandPowerValues[20]), as.numeric(splittedBandPowerValues[21]),
as.numeric(splittedBandPowerValues[22]), as.numeric(splittedBandPowerValues[23]), as.numeric(splittedBandPowerValues[24]), as.numeric(splittedBandPowerValues[25]), as.numeric(splittedBandPowerValues[26]),
as.numeric(splittedBandPowerValues[27]), as.numeric(splittedBandPowerValues[28]), as.numeric(splittedBandPowerValues[29]), as.numeric(splittedBandPowerValues[30]), as.numeric(splittedBandPowerValues[31]),
as.numeric(splittedBandPowerValues[32]), as.numeric(splittedBandPowerValues[33]), as.numeric(splittedBandPowerValues[34]), as.numeric(splittedBandPowerValues[35]), as.numeric(splittedBandPowerValues[36]),
as.numeric(splittedBandPowerValues[37]), as.numeric(splittedBandPowerValues[38]), as.numeric(splittedBandPowerValues[39]), as.numeric(splittedBandPowerValues[40]), as.numeric(splittedBandPowerValues[41]),
as.numeric(splittedBandPowerValues[42]), as.numeric(splittedBandPowerValues[43]), as.numeric(splittedBandPowerValues[44]), as.numeric(splittedBandPowerValues[45]), as.numeric(splittedBandPowerValues[46]),
as.numeric(splittedBandPowerValues[47]), as.numeric(splittedBandPowerValues[48]), as.numeric(splittedBandPowerValues[49]), as.numeric(splittedBandPowerValues[50]), as.numeric(splittedBandPowerValues[51]),
as.numeric(splittedBandPowerValues[52]), as.numeric(splittedBandPowerValues[53]), as.numeric(splittedBandPowerValues[54]), as.numeric(splittedBandPowerValues[55]), as.numeric(splittedBandPowerValues[56]),
as.numeric(splittedBandPowerValues[57]), as.numeric(splittedBandPowerValues[58]), as.numeric(splittedBandPowerValues[59]), as.numeric(splittedBandPowerValues[60]), as.numeric(splittedBandPowerValues[61]),
as.numeric(splittedBandPowerValues[62]), as.numeric(splittedBandPowerValues[63]), as.numeric(splittedBandPowerValues[64]), as.numeric(splittedBandPowerValues[65]), as.numeric(splittedBandPowerValues[66]),
as.numeric(splittedBandPowerValues[67]), as.numeric(splittedBandPowerValues[68]), as.numeric(splittedBandPowerValues[69]), as.numeric(splittedBandPowerValues[70]), as.numeric(splittedBandPowerValues[71]));
rawBandPowerDataFrameStage1Temp <- rawBandPowerDataFrameStage1
rawBandPowerDataFrameStage1Temp[nrow(rawBandPowerDataFrameStage1) + 1, ] <- row
rawBandPowerDataFrameStage1 <- rawBandPowerDataFrameStage1Temp
}
}
}
rawBandPowerDataFrameStage1Temp <- NULL
row <- NULL
tempDataFrame <- NULL
splittedBandPowerValues <- NULL
rowBandPowerValue <- NULL
rowTimeValue <- NULL
# ------------- Tage 2
rawBandPowerDataFrameStage2 <- NULL
rawBandPowerDataFrameStage2Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage2)) {
rowTimeValue <- rawEmotivTrackingDataStage2$time[i]
rowBandPowerValue <- rawEmotivTrackingDataStage2$BandPowerDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rowBandPowerValue) && !is.na(rowBandPowerValue) && !is.nan(rowBandPowerValue) && length(rowBandPowerValue) && rowBandPowerValue != "")
{
splittedBandPowerValues <- stringr::str_split(rowBandPowerValue, ";")[[1]]
splittedBandPowerValues <- stringr::str_replace(splittedBandPowerValues, ",", ".")
if (is.null(rawBandPowerDataFrameStage2))
{
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "AF3/theta" = c(as.numeric(splittedBandPowerValues[2])), "AF3/alpha" = c(as.numeric(splittedBandPowerValues[3])), "AF3/betaL" = c(as.numeric(splittedBandPowerValues[4])), "AF3/betaH" = c(as.numeric(splittedBandPowerValues[5])), "AF3/gamma" = c(as.numeric(splittedBandPowerValues[6])),
"F7/theta" = c(as.numeric(splittedBandPowerValues[7])), "F7/alpha" = c(as.numeric(splittedBandPowerValues[8])),"F7/betaL" = c(as.numeric(splittedBandPowerValues[9])),"F7/betaH" = c(as.numeric(splittedBandPowerValues[10])),"F7/gamma" = c(as.numeric(splittedBandPowerValues[11])),
"F3/theta" = c(as.numeric(splittedBandPowerValues[12])), "F3/alpha" = c(as.numeric(splittedBandPowerValues[13])),"F3/betaL" = c(as.numeric(splittedBandPowerValues[14])),"F3/betaH" = c(as.numeric(splittedBandPowerValues[15])),"F3/gamma" = c(as.numeric(splittedBandPowerValues[16])),
"FC5/theta" = c(as.numeric(splittedBandPowerValues[17])),"FC5/alpha" = c(as.numeric(splittedBandPowerValues[18])),"FC5/betaL" = c(as.numeric(splittedBandPowerValues[19])),"FC5/betaH" = c(as.numeric(splittedBandPowerValues[20])),"FC5/gamma" = c(as.numeric(splittedBandPowerValues[21])),
"T7/theta" = c(as.numeric(splittedBandPowerValues[22])), "T7/alpha" = c(as.numeric(splittedBandPowerValues[23])),"T7/betaL" = c(as.numeric(splittedBandPowerValues[24])),"T7/betaH" = c(as.numeric(splittedBandPowerValues[25])),"T7/gamma" = c(as.numeric(splittedBandPowerValues[26])),
"P7/theta" = c(as.numeric(splittedBandPowerValues[27])), "P7/alpha" = c(as.numeric(splittedBandPowerValues[28])),"P7/betaL" = c(as.numeric(splittedBandPowerValues[29])),"P7/betaH" = c(as.numeric(splittedBandPowerValues[30])),"P7/gamma" = c(as.numeric(splittedBandPowerValues[31])),
"O1/theta" = c(as.numeric(splittedBandPowerValues[32])), "O1/alpha" = c(as.numeric(splittedBandPowerValues[33])),"O1/betaL" = c(as.numeric(splittedBandPowerValues[34])),"O1/betaH" = c(as.numeric(splittedBandPowerValues[35])),"O1/gamma" = c(as.numeric(splittedBandPowerValues[36])),
"O2/theta" = c(as.numeric(splittedBandPowerValues[37])), "O2/alpha" = c(as.numeric(splittedBandPowerValues[38])),"O2/betaL" = c(as.numeric(splittedBandPowerValues[39])),"O2/betaH" = c(as.numeric(splittedBandPowerValues[40])),"O2/gamma" = c(as.numeric(splittedBandPowerValues[41])),
"P8/theta" = c(as.numeric(splittedBandPowerValues[42])), "P8/alpha" = c(as.numeric(splittedBandPowerValues[43])),"P8/betaL" = c(as.numeric(splittedBandPowerValues[44])),"P8/betaH" = c(as.numeric(splittedBandPowerValues[45])),"P8/gamma" = c(as.numeric(splittedBandPowerValues[46])),
"T8/theta" = c(as.numeric(splittedBandPowerValues[47])), "T8/alpha" = c(as.numeric(splittedBandPowerValues[48])),"T8/betaL" = c(as.numeric(splittedBandPowerValues[49])),"T8/betaH" = c(as.numeric(splittedBandPowerValues[50])),"T8/gamma" = c(as.numeric(splittedBandPowerValues[51])),
"FC6/theta" = c(as.numeric(splittedBandPowerValues[52])),"FC6/alpha" = c(as.numeric(splittedBandPowerValues[53])),"FC6/betaL" = c(as.numeric(splittedBandPowerValues[54])),"FC6/betaH" = c(as.numeric(splittedBandPowerValues[55])),"FC6/gamma" = c(as.numeric(splittedBandPowerValues[56])),
"F4/theta" = c(as.numeric(splittedBandPowerValues[57])), "F4/alpha" = c(as.numeric(splittedBandPowerValues[58])),"F4/betaL" = c(as.numeric(splittedBandPowerValues[59])),"F4/betaH" = c(as.numeric(splittedBandPowerValues[60])),"F4/gamma" = c(as.numeric(splittedBandPowerValues[61])),
"F8/theta" = c(as.numeric(splittedBandPowerValues[62])), "F8/alpha" = c(as.numeric(splittedBandPowerValues[63])),"F8/betaL" = c(as.numeric(splittedBandPowerValues[64])),"F8/betaH" = c(as.numeric(splittedBandPowerValues[65])),"F8/gamma" = c(as.numeric(splittedBandPowerValues[66])),
"AF4/theta" = c(as.numeric(splittedBandPowerValues[67])),"AF4/alpha" = c(as.numeric(splittedBandPowerValues[68])),"AF4/betaL" = c(as.numeric(splittedBandPowerValues[69])),"AF4/betaH" = c(as.numeric(splittedBandPowerValues[70])),"AF4/gamma" = c(as.numeric(splittedBandPowerValues[71])));
rawBandPowerDataFrameStage2 <- tempDataFrame
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedBandPowerValues[2]), as.numeric(splittedBandPowerValues[3]), as.numeric(splittedBandPowerValues[4]), as.numeric(splittedBandPowerValues[5]), as.numeric(splittedBandPowerValues[6]),
as.numeric(splittedBandPowerValues[7]),  as.numeric(splittedBandPowerValues[8]),  as.numeric(splittedBandPowerValues[9]),  as.numeric(splittedBandPowerValues[10]), as.numeric(splittedBandPowerValues[11]),
as.numeric(splittedBandPowerValues[12]), as.numeric(splittedBandPowerValues[13]), as.numeric(splittedBandPowerValues[14]), as.numeric(splittedBandPowerValues[15]), as.numeric(splittedBandPowerValues[16]),
as.numeric(splittedBandPowerValues[17]), as.numeric(splittedBandPowerValues[18]), as.numeric(splittedBandPowerValues[19]), as.numeric(splittedBandPowerValues[20]), as.numeric(splittedBandPowerValues[21]),
as.numeric(splittedBandPowerValues[22]), as.numeric(splittedBandPowerValues[23]), as.numeric(splittedBandPowerValues[24]), as.numeric(splittedBandPowerValues[25]), as.numeric(splittedBandPowerValues[26]),
as.numeric(splittedBandPowerValues[27]), as.numeric(splittedBandPowerValues[28]), as.numeric(splittedBandPowerValues[29]), as.numeric(splittedBandPowerValues[30]), as.numeric(splittedBandPowerValues[31]),
as.numeric(splittedBandPowerValues[32]), as.numeric(splittedBandPowerValues[33]), as.numeric(splittedBandPowerValues[34]), as.numeric(splittedBandPowerValues[35]), as.numeric(splittedBandPowerValues[36]),
as.numeric(splittedBandPowerValues[37]), as.numeric(splittedBandPowerValues[38]), as.numeric(splittedBandPowerValues[39]), as.numeric(splittedBandPowerValues[40]), as.numeric(splittedBandPowerValues[41]),
as.numeric(splittedBandPowerValues[42]), as.numeric(splittedBandPowerValues[43]), as.numeric(splittedBandPowerValues[44]), as.numeric(splittedBandPowerValues[45]), as.numeric(splittedBandPowerValues[46]),
as.numeric(splittedBandPowerValues[47]), as.numeric(splittedBandPowerValues[48]), as.numeric(splittedBandPowerValues[49]), as.numeric(splittedBandPowerValues[50]), as.numeric(splittedBandPowerValues[51]),
as.numeric(splittedBandPowerValues[52]), as.numeric(splittedBandPowerValues[53]), as.numeric(splittedBandPowerValues[54]), as.numeric(splittedBandPowerValues[55]), as.numeric(splittedBandPowerValues[56]),
as.numeric(splittedBandPowerValues[57]), as.numeric(splittedBandPowerValues[58]), as.numeric(splittedBandPowerValues[59]), as.numeric(splittedBandPowerValues[60]), as.numeric(splittedBandPowerValues[61]),
as.numeric(splittedBandPowerValues[62]), as.numeric(splittedBandPowerValues[63]), as.numeric(splittedBandPowerValues[64]), as.numeric(splittedBandPowerValues[65]), as.numeric(splittedBandPowerValues[66]),
as.numeric(splittedBandPowerValues[67]), as.numeric(splittedBandPowerValues[68]), as.numeric(splittedBandPowerValues[69]), as.numeric(splittedBandPowerValues[70]), as.numeric(splittedBandPowerValues[71]));
rawBandPowerDataFrameStage2Temp <- rawBandPowerDataFrameStage2
rawBandPowerDataFrameStage2Temp[nrow(rawBandPowerDataFrameStage2) + 1, ] <- row
rawBandPowerDataFrameStage2 <- rawBandPowerDataFrameStage2Temp
}
}
}
rawBandPowerDataFrameStage2Temp <- NULL
row <- NULL
tempDataFrame <- NULL
splittedBandPowerValues <- NULL
rowBandPowerValue <- NULL
rowTimeValue <- NULL
View(rawBandPowerDataFrameStage0)
#-------------- Stage 0
rawPerformanceMetricDataFrameStage0 <- NULL
rawPerformanceMetricDataFrameStage0Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage0)) {
rowTimeValue <- rawEmotivTrackingDataStage0$time[i]
rawPerformanceMetricValue <- rawEmotivTrackingDataStage0$PerformanceMetricsDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rawPerformanceMetricValue) && !is.na(rawPerformanceMetricValue) && !is.nan(rawPerformanceMetricValue) && length(rawPerformanceMetricValue) && rawPerformanceMetricValue != "")
{
splittedPerformanceMetricValue <- stringr::str_split(rawPerformanceMetricValue, ";")[[1]]
splittedPerformanceMetricValue <- stringr::str_replace(splittedPerformanceMetricValue, ",", ".")
if (is.null(rawPerformanceMetricDataFrameStage0))
{
rawPerformanceMetricDataFrameStage0 <- data.frame("time" = c(as.numeric(rowTimeValue)), "eng" = c(as.numeric(splittedPerformanceMetricValue[3])), "exc" = c(as.numeric(splittedPerformanceMetricValue[5])),
"lex" = c(as.numeric(splittedPerformanceMetricValue[6])), "str" = c(as.numeric(splittedPerformanceMetricValue[8])), "rel" = c(as.numeric(splittedPerformanceMetricValue[10])),
"int" = c(as.numeric(splittedPerformanceMetricValue[12])), "foc" = c(as.numeric(splittedPerformanceMetricValue[14])));
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedPerformanceMetricValue[3]), as.numeric(splittedPerformanceMetricValue[5]),
as.numeric(splittedPerformanceMetricValue[6]),  as.numeric(splittedPerformanceMetricValue[8]), as.numeric(splittedPerformanceMetricValue[10]),
as.numeric(splittedPerformanceMetricValue[12]), as.numeric(splittedPerformanceMetricValue[14]));
rawPerformanceMetricDataFrameStage0Temp <- rawPerformanceMetricDataFrameStage0
rawPerformanceMetricDataFrameStage0Temp[nrow(rawPerformanceMetricDataFrameStage0) + 1, ] <- row
rawPerformanceMetricDataFrameStage0 <- rawPerformanceMetricDataFrameStage0Temp
}
}
}
rawPerformanceMetricDataFrameStage0Temp <- NULL
rowTimeValue <- NULL
rawPerformanceMetricValue <- NULL
splittedPerformanceMetricValue <- NULL
#-------------- Stage 1
rawPerformanceMetricDataFrameStage1 <- NULL
rawPerformanceMetricDataFrameStage1Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage1)) {
rowTimeValue <- rawEmotivTrackingDataStage1$time[i]
rawPerformanceMetricValue <- rawEmotivTrackingDataStage1$PerformanceMetricsDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rawPerformanceMetricValue) && !is.na(rawPerformanceMetricValue) && !is.nan(rawPerformanceMetricValue) && length(rawPerformanceMetricValue) && rawPerformanceMetricValue != "")
{
splittedPerformanceMetricValue <- stringr::str_split(rawPerformanceMetricValue, ";")[[1]]
splittedPerformanceMetricValue <- stringr::str_replace(splittedPerformanceMetricValue, ",", ".")
if (is.null(rawPerformanceMetricDataFrameStage1))
{
rawPerformanceMetricDataFrameStage1 <- data.frame("time" = c(as.numeric(rowTimeValue)), "eng" = c(as.numeric(rawPerformanceMetricValue[3])), "exc" = c(as.numeric(rawPerformanceMetricValue[5])),
"lex" = c(as.numeric(rawPerformanceMetricValue[6])), "str" = c(as.numeric(rawPerformanceMetricValue[8])), "rel" = c(as.numeric(rawPerformanceMetricValue[10])),
"int" = c(as.numeric(rawPerformanceMetricValue[12])), "foc" = c(as.numeric(rawPerformanceMetricValue[14])));
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(rawPerformanceMetricValue[3]), as.numeric(rawPerformanceMetricValue[5]),
as.numeric(rawPerformanceMetricValue[6]),  as.numeric(rawPerformanceMetricValue[8]), as.numeric(rawPerformanceMetricValue[10]),
as.numeric(rawPerformanceMetricValue[12]), as.numeric(rawPerformanceMetricValue[14]));
rawPerformanceMetricDataFrameStage1Temp <- rawPerformanceMetricDataFrameStage1
rawPerformanceMetricDataFrameStage1Temp[nrow(rawPerformanceMetricDataFrameStage1) + 1, ] <- row
rawPerformanceMetricDataFrameStage1 <- rawPerformanceMetricDataFrameStage1Temp
}
}
}
rawPerformanceMetricDataFrameStage1Temp <- NULL
rowTimeValue <- NULL
rawPerformanceMetricValue <- NULL
splittedPerformanceMetricValue <- NULL
#-------------- Stage 2
rawPerformanceMetricDataFrameStage2 <- NULL
rawPerformanceMetricDataFrameStage2Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage2)) {
rowTimeValue <- rawEmotivTrackingDataStage2$time[i]
rawPerformanceMetricValue <- rawEmotivTrackingDataStage2$PerformanceMetricsDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rawPerformanceMetricValue) && !is.na(rawPerformanceMetricValue) && !is.nan(rawPerformanceMetricValue) && length(rawPerformanceMetricValue) && rawPerformanceMetricValue != "")
{
splittedPerformanceMetricValue <- stringr::str_split(rawPerformanceMetricValue, ";")[[1]]
splittedPerformanceMetricValue <- stringr::str_replace(splittedPerformanceMetricValue, ",", ".")
if (is.null(rawPerformanceMetricDataFrameStage2))
{
rawPerformanceMetricDataFrameStage2 <- tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "eng" = c(as.numeric(splittedPerformanceMetricValue[3])), "exc" = c(as.numeric(splittedPerformanceMetricValue[5])),
"lex" = c(as.numeric(splittedPerformanceMetricValue[6])), "str" = c(as.numeric(splittedPerformanceMetricValue[8])), "rel" = c(as.numeric(splittedPerformanceMetricValue[10])),
"int" = c(as.numeric(splittedPerformanceMetricValue[12])), "foc" = c(as.numeric(splittedPerformanceMetricValue[14])));
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedPerformanceMetricValue[3]), as.numeric(splittedPerformanceMetricValue[5]),
as.numeric(splittedPerformanceMetricValue[6]),  as.numeric(splittedPerformanceMetricValue[8]), as.numeric(splittedPerformanceMetricValue[10]),
as.numeric(splittedPerformanceMetricValue[12]), as.numeric(splittedPerformanceMetricValue[14]));
rawPerformanceMetricDataFrameStage2Temp <- rawPerformanceMetricDataFrameStage2
rawPerformanceMetricDataFrameStage2Temp[nrow(rawPerformanceMetricDataFrameStage2) + 1, ] <- row
rawPerformanceMetricDataFrameStage2 <- rawPerformanceMetricDataFrameStage2Temp
#rawPerformanceMetricDataFrameStage2 <- rbind(rawPerformanceMetricDataFrameStage2, tempDataFrame)
}
}
}
rawPerformanceMetricDataFrameStage2Temp <- NULL
rowTimeValue <- NULL
rawPerformanceMetricValue <- NULL
splittedPerformanceMetricValue <- NULL
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=True)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition A'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-1'
path <- condition + '/' +  type_vrstk + '/'
path <- paste(condition, '/',  type_vrstk, '/')
path <- paste(condition,  type_vrstk, sep='/')
vrstk_files <- list.files(path)
condition <- 'Condition A'
type_vrstk <- 'VRSTK/'
type_biosppy <- 'Biosppy/'
id <- 'id-1'
path <- paste(condition,  type_vrstk, sep='/')
vrstk_files <- list.files(path)
condition <- 'Condition A'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-1'
path <- file.path(condition,  type_vrstk)
vrstk_files <- list.files(path)
path <- file.path("./",condition,  type_vrstk, "/")
path <- file.path(".",condition,  type_vrstk, "/")
vrstk_files <- list.files(path)
vrstk_files <- dir(path)
vrstk_files <- dir(getwd())
path <- file.path(getwd(), condition,  type_vrstk, "/")
vrstk_files <- dir(path)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- dir(path)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- dir(path)
for (file in vrstk_files) {
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
View(ImportTrackingData)
vrstk_files <- list.files(path)
for (file in vrstk_files) {
if(grepl(file, id, fixed=TRUE)){
f <- file.path(path, file)
rawTrackingData <- ImportTrackingData(f)
}
}
for (file in vrstk_files) {
for (file in vrstk_files) {
if(grepl(id, file, fixed=TRUE)){
f <- file.path(path, file)
rawTrackingData <- ImportTrackingData(f)
}
}
for (file in vrstk_files) {
f <- file.path(path, file)
if(grepl(id, file, fixed=TRUE)){
f <- file.path(path, file)
rawTrackingData <- ImportTrackingData(f)
}
}
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
for (file in vrstk_files) {
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
for (file in vrstk_files) {
f <- file
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(file, id, fixed=TRUE)){
rawTrackingData <- ImportTrackingData(file)
}
}
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(str_detect(id, file)){
rawTrackingData <- ImportTrackingData(file)
}
}
test <- "/test/ecgt.txt/-test--id-"
chars <- "id"
res <- str_detect(chars, test)
test <- "/test/ecgt.txt/-test--id-"
chars <- "ec"
res <- str_detect(chars, test)
test <- "/test/ecgt.txt/-test--id-"
chars <- "ec"
res <- grepl(chars, test)
test <- "/test/ecgt.txt/-test--id-"
chars <- "id"
res <- grepl(chars, test)
test <- "/test/ecgt.txt/-test--id-"
chars <- "id"
res <- FALSE
res <- grepl(chars, test)
test <- "Condition B/VRSTK/Proband-id-13-Condition-B_8-23_13-32-7.json"
chars <- "id-13"
res <- FALSE
res <- grepl(chars, test)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
path <- file.path(condition,  type_vrstk, "/")
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
counter <- 0
for (file in vrstk_files) {
counter <- counter + 1
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
}
}
path <- file.path(condition,  type_biosppy, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
#2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
# 6. RawFixationSaccadsData
source("RawFixationSaccadsData.r", echo=TRUE)
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
# 7. RawVRQuestionnaireToolkitUnconnyValley
source("RawVRQuestionnaireToolkitUnconnyValley.r", echo=TRUE)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQ
source("RawVRQuestionnaireToolkitSSQ.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition B'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-13'
path <- file.path(condition,  type_vrstk, "/")
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
#transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBilinoECGDataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage0 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage1 <- ImporttransformedBilinoTrackingData(file)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBilinoEDADataFrameStage2 <- ImporttransformedBilinoTrackingData(file)
}
}
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
View(transformedBilinoEDADataFrameStage0)
