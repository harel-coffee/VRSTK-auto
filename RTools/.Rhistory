source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#--------------------------------------------------
# 10. Data-Fusion of one Participant
#rm(participent_13_DataFrame)
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- paste("participent_", id, "_DataFrame", sep="") #'participent_'+ as.character(id) + '_DataFrame'
assign(participent_variable_name, fuseParticipentDataFrames(id, condition, 1))
assign(participent_variable_name, unique(get(participent_variable_name)))
participent_Log <- duplicated(get(participent_variable_name))
print(participent_Log)
assign(participent_variable_name, get(participent_variable_name) %>% distinct(time, .keep_all = TRUE))
# add participent id to dataframe
nRows <- nrow(get(participent_variable_name))
#tempDataFrame <- data.frame(matrix(id, nrow = countRows, ncol = 1))
tempDataFrame <- NULL
tempDataFrame <- data.frame(pId = character())
tempDataFrame[1:nRows,] <- id
tempDataFrame <- cbind(tempDataFrame, get(participent_variable_name))
assign(participent_variable_name, tempDataFrame)
# cleanup
rm(pagesTIMESUMsStage1Temp)
rm(pagesQualityParametersStage1)
rm(pagesQualityParametersStage2)
rm(rawVRQuestionnaireToolkitSSQDataFrameStage2)
rm(rawVRQuestionnaireToolkitUncannyValleyDataFrameStage1)
rm(bandPowerDataFrameStage0)
rm(bandPowerDataFrameStage1)
rm(bandPowerDataFrameStage2)
rm(performanceMetricDataFrameStage0)
rm(performanceMetricDataFrameStage1)
rm(performanceMetricDataFrameStage2)
rm(eyeTrackingInformationStage0)
rm(eyeTrackingInformationStage1)
rm(eyeTrackingInformationStage2)
rm(rawTrackingData)
rm(tempDataFrame)
rm(transformedBitalinoECGDataFrameStage0)
rm(transformedBitalinoECGDataFrameStage1)
rm(transformedBitalinoECGDataFrameStage2)
rm(transformedBitalinoEDADataFrameStage0)
rm(transformedBitalinoEDADataFrameStage1)
rm(transformedBitalinoEDADataFrameStage2)
# some misc cleanup
rm(nRows)
rm(countRows)
rm(participent_Log)
# automation build process
library(dplyr)
library(magrittr)
# Source: https://stackoverflow.com/questions/9368900/how-to-check-if-object-variable-is-defined-in-r
existsEnvVariable <-function(name) {
return(1==length(ls(pattern=paste("^", name, "$", sep=""), env=globalenv())))
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition A'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-7'
path <- file.path(condition,  type_vrstk, "/")
#   1.1 ImportTrackingData
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
#transformedBitalinoECGDataFrameStage2 <- ImporttransformedBitalinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBitalinoEDADataFrameStage2 <- ImporttransformedBitalinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBitalinoECGDataFrameStage0 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoECGDataFrameStage0) <- c('time','HeartRate','RPeaks')
transformedBitalinoECGDataFrameStage0 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBitalinoECGDataFrameStage1 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoECGDataFrameStage1) <- c('time','HeartRate','RPeaks')
transformedBitalinoECGDataFrameStage1 %<>% mutate_if(is.character, as.numeric)
transformedBitalinoECGDataFrameStage1$time <- as.integer(transformedBitalinoECGDataFrameStage1$time)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBitalinoECGDataFrameStage2 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoECGDataFrameStage2) <- c('time','HeartRate','RPeaks')
transformedBitalinoECGDataFrameStage2 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBitalinoEDADataFrameStage0 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoEDADataFrameStage0) <- c('onsets','peaks','amps')
transformedBitalinoEDADataFrameStage0 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBitalinoEDADataFrameStage1 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoEDADataFrameStage1) <- c('onsets','peaks','amps')
transformedBitalinoEDADataFrameStage1 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBitalinoEDADataFrameStage2 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoEDADataFrameStage2) <- c('onsets','peaks','amps')
transformedBitalinoEDADataFrameStage2 %<>% mutate_if(is.character, as.numeric)
}
}
#   1.2.1 Upsampling transformed Bitalino EDA DataFrame
source("UpsamplingTransformedBitalinoEDADataFrame.R", echo=TRUE)
transformedBitalinoEDADataFrameStage0 <- upsamplingTransformedBitalinoEdeDataFrame(0)
transformedBitalinoEDADataFrameStage1 <- upsamplingTransformedBitalinoEdeDataFrame(1)
transformedBitalinoEDADataFrameStage2 <- upsamplingTransformedBitalinoEdeDataFrame(2)
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
bandPowerDataFrameStage0 <- downsampling(3,0)
bandPowerDataFrameStage1 <- downsampling(3,1)
bandPowerDataFrameStage2 <- downsampling(3,2)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
performanceMetricDataFrameStage1 <- downsampling(4,1)
performanceMetricDataFrameStage2 <- downsampling(4,2)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
pagesQualityParametersStage2 <- downsampling(5,2)
if (existsEnvVariable("pagesTIMESUMsStage1") && !(is.null(pagesTIMESUMsStage1)))
{
lastRow <- nrow(pagesQualityParametersStage1)
row <- c(as.numeric(0),
as.numeric(0),
as.numeric(pagesQualityParametersStage1[lastRow, 7]),
as.numeric(0),
as.numeric(pagesQualityParametersStage1[lastRow, 10]))
pagesTIMESUMsStage1Temp <- pagesTIMESUMsStage1
pagesTIMESUMsStage1Temp[nrow(pagesTIMESUMsStage1) + 1, ] <- row
pagesTIMESUMsStage1 <- pagesTIMESUMsStage1Temp
} else
{
lastRow <- nrow(pagesQualityParametersStage1)
pagesTIMESUMsStage1 <- data.frame("MISSING"  = c(as.numeric(0)),
"TIME_RSI" = c(as.numeric(0)),
"TIME_SUM" = c(as.numeric(pagesQualityParametersStage1[lastRow, 7])),
"MISSREL"  = c(as.numeric(0)),
"DEG_TIME" = c(as.numeric(pagesQualityParametersStage1[lastRow, 10])));
}
if (!(is.null(pagesTIMESUMsStage1)) && nrow(pagesTIMESUMsStage1) >= 10) {
source("EvaluateQualityParamtersAsValidityscore.r", echo=TRUE)
#pagesTIMESUMsStage1 <- EvaluateTimeRsi()
}
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
#   6.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
eyeTrackingInformationStage0 <- downsampling(6,0)
eyeTrackingInformationStage1 <- downsampling(6,1)
eyeTrackingInformationStage2 <- downsampling(6,2)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#--------------------------------------------------
# 10. Data-Fusion of one Participant
#rm(participent_13_DataFrame)
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- paste("participent_", id, "_DataFrame", sep="") #'participent_'+ as.character(id) + '_DataFrame'
assign(participent_variable_name, fuseParticipentDataFrames(id, condition, 1))
assign(participent_variable_name, unique(get(participent_variable_name)))
participent_Log <- duplicated(get(participent_variable_name))
print(participent_Log)
assign(participent_variable_name, get(participent_variable_name) %>% distinct(time, .keep_all = TRUE))
# add participent id to dataframe
nRows <- nrow(get(participent_variable_name))
#tempDataFrame <- data.frame(matrix(id, nrow = countRows, ncol = 1))
tempDataFrame <- NULL
tempDataFrame <- data.frame(pId = character())
tempDataFrame[1:nRows,] <- id
tempDataFrame <- cbind(tempDataFrame, get(participent_variable_name))
assign(participent_variable_name, tempDataFrame)
# cleanup
rm(pagesTIMESUMsStage1Temp)
rm(pagesQualityParametersStage1)
rm(pagesQualityParametersStage2)
rm(rawVRQuestionnaireToolkitSSQDataFrameStage2)
rm(rawVRQuestionnaireToolkitUncannyValleyDataFrameStage1)
rm(bandPowerDataFrameStage0)
rm(bandPowerDataFrameStage1)
rm(bandPowerDataFrameStage2)
rm(performanceMetricDataFrameStage0)
rm(performanceMetricDataFrameStage1)
rm(performanceMetricDataFrameStage2)
rm(eyeTrackingInformationStage0)
rm(eyeTrackingInformationStage1)
rm(eyeTrackingInformationStage2)
rm(rawTrackingData)
rm(tempDataFrame)
rm(transformedBitalinoECGDataFrameStage0)
rm(transformedBitalinoECGDataFrameStage1)
rm(transformedBitalinoECGDataFrameStage2)
rm(transformedBitalinoEDADataFrameStage0)
rm(transformedBitalinoEDADataFrameStage1)
rm(transformedBitalinoEDADataFrameStage2)
# some misc cleanup
rm(nRows)
rm(countRows)
rm(participent_Log)
# automation build process
library(dplyr)
library(magrittr)
# Source: https://stackoverflow.com/questions/9368900/how-to-check-if-object-variable-is-defined-in-r
existsEnvVariable <-function(name) {
return(1==length(ls(pattern=paste("^", name, "$", sep=""), env=globalenv())))
}
# 0. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
# 1. ImportTrackingData
source("ImportTrackingData.r", echo=TRUE)
condition <- 'Condition A'
type_vrstk <- 'VRSTK'
type_biosppy <- 'Biosppy'
id <- 'id-10'
path <- file.path(condition,  type_vrstk, "/")
#   1.1 ImportTrackingData
# vrstk tracking files
#rawTrackingData <- ImportTrackingData('Condition A/VRSTK/Proband-id-1-Condition-A_8-18_15-23-31.json')
vrstk_files <- list.files(path, pattern=".json", all.files=T, full.names=T)
for (file in vrstk_files) {
if(grepl(id, file)){
rawTrackingData <- ImportTrackingData(file)
break
}
}
#transformedBitalinoECGDataFrameStage2 <- ImporttransformedBitalinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-ECG_HearRateResults.txt')
#transformedBitalinoEDADataFrameStage2 <- ImporttransformedBitalinoTrackingData('Condition A/Biosppy/id-1/Bitalinoi-Proband-Stage-2-id-1-Condition-A-EDA_EdaResults.txt')
path <- file.path(condition,  type_biosppy, "/", id, "/")
biosppy_files <- list.files(path, pattern=".txt", all.files=T, full.names=T)
for (file in biosppy_files) {
if(grepl(id, file) && grepl("Stage-0", file) && grepl("ECG_HearRateResults", file)){
transformedBitalinoECGDataFrameStage0 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoECGDataFrameStage0) <- c('time','HeartRate','RPeaks')
transformedBitalinoECGDataFrameStage0 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("ECG_HearRateResults", file)){
transformedBitalinoECGDataFrameStage1 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoECGDataFrameStage1) <- c('time','HeartRate','RPeaks')
transformedBitalinoECGDataFrameStage1 %<>% mutate_if(is.character, as.numeric)
transformedBitalinoECGDataFrameStage1$time <- as.integer(transformedBitalinoECGDataFrameStage1$time)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("ECG_HearRateResults", file)){
transformedBitalinoECGDataFrameStage2 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoECGDataFrameStage2) <- c('time','HeartRate','RPeaks')
transformedBitalinoECGDataFrameStage2 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-0", file) && grepl("EDA_EdaResults", file)){
transformedBitalinoEDADataFrameStage0 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoEDADataFrameStage0) <- c('onsets','peaks','amps')
transformedBitalinoEDADataFrameStage0 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-1", file) && grepl("EDA_EdaResults", file)){
transformedBitalinoEDADataFrameStage1 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoEDADataFrameStage1) <- c('onsets','peaks','amps')
transformedBitalinoEDADataFrameStage1 %<>% mutate_if(is.character, as.numeric)
}
if(grepl(id, file) && grepl("Stage-2", file) && grepl("EDA_EdaResults", file)){
transformedBitalinoEDADataFrameStage2 <- ImportTransformedBitalinoTrackingData(file)
colnames(transformedBitalinoEDADataFrameStage2) <- c('onsets','peaks','amps')
transformedBitalinoEDADataFrameStage2 %<>% mutate_if(is.character, as.numeric)
}
}
#   1.2.1 Upsampling transformed Bitalino EDA DataFrame
source("UpsamplingTransformedBitalinoEDADataFrame.R", echo=TRUE)
transformedBitalinoEDADataFrameStage0 <- upsamplingTransformedBitalinoEdeDataFrame(0)
transformedBitalinoEDADataFrameStage1 <- upsamplingTransformedBitalinoEdeDataFrame(1)
transformedBitalinoEDADataFrameStage2 <- upsamplingTransformedBitalinoEdeDataFrame(2)
# 2. RawEmotivTrackingData
source("RawEmotivTrackingData.r", echo=TRUE)
# 3. RawBandPowerData
source("RawBandPowerData.r", echo=TRUE)
#   3.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
bandPowerDataFrameStage0 <- downsampling(3,0)
bandPowerDataFrameStage1 <- downsampling(3,1)
bandPowerDataFrameStage2 <- downsampling(3,2)
# 4. RawPerformanceMetricData
source("RawPerformanceMetricData.r", echo=TRUE)
#   4.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
performanceMetricDataFrameStage0 <- downsampling(4,0)
performanceMetricDataFrameStage1 <- downsampling(4,1)
performanceMetricDataFrameStage2 <- downsampling(4,2)
# 5. PagesQualityParameters
source("PagesQualityParameters.r", echo=TRUE)
#   5.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
pagesQualityParametersStage1 <- downsampling(5,1)
pagesQualityParametersStage2 <- downsampling(5,2)
if (existsEnvVariable("pagesTIMESUMsStage1") && !(is.null(pagesTIMESUMsStage1)))
{
lastRow <- nrow(pagesQualityParametersStage1)
row <- c(as.numeric(0),
as.numeric(0),
as.numeric(pagesQualityParametersStage1[lastRow, 7]),
as.numeric(0),
as.numeric(pagesQualityParametersStage1[lastRow, 10]))
pagesTIMESUMsStage1Temp <- pagesTIMESUMsStage1
pagesTIMESUMsStage1Temp[nrow(pagesTIMESUMsStage1) + 1, ] <- row
pagesTIMESUMsStage1 <- pagesTIMESUMsStage1Temp
} else
{
lastRow <- nrow(pagesQualityParametersStage1)
pagesTIMESUMsStage1 <- data.frame("MISSING"  = c(as.numeric(0)),
"TIME_RSI" = c(as.numeric(0)),
"TIME_SUM" = c(as.numeric(pagesQualityParametersStage1[lastRow, 7])),
"MISSREL"  = c(as.numeric(0)),
"DEG_TIME" = c(as.numeric(pagesQualityParametersStage1[lastRow, 10])));
}
View(pagesTIMESUMsStage1)
if (!(is.null(pagesTIMESUMsStage1)) && nrow(pagesTIMESUMsStage1) >= 10) {
source("EvaluateQualityParamtersAsValidityscore.r", echo=TRUE)
#pagesTIMESUMsStage1 <- EvaluateTimeRsi()
}
# 6. RawFixationSaccadsData
source("RawFixationSaccadesData.r", echo=TRUE)
#   6.1 Downsampling/Upsampling
source("DownsampleToBitalinoResults.r", echo=TRUE)
eyeTrackingInformationStage0 <- downsampling(6,0)
eyeTrackingInformationStage1 <- downsampling(6,1)
eyeTrackingInformationStage2 <- downsampling(6,2)
# 7. RawVRQuestionnaireToolkitUncannyValleyData
source("RawVRQuestionnaireToolkitUncannyValleyData.r", echo=TRUE)
# 8. RawVRQuestionnaireToolkitSSQDataFrame
source("RawVRQuestionnaireToolkitSSQDataFrame.r", echo=TRUE)
# 9. Clear environment
source("CleanUpEnvironmentFromTemporaryUsedVariables.r", echo=TRUE)
#--------------------------------------------------
# 10. Data-Fusion of one Participant
#rm(participent_13_DataFrame)
source("FusionOfTrackingDataOfOneParticipent.r", echo=TRUE)
participent_variable_name <- paste("participent_", id, "_DataFrame", sep="") #'participent_'+ as.character(id) + '_DataFrame'
assign(participent_variable_name, fuseParticipentDataFrames(id, condition, 1))
assign(participent_variable_name, unique(get(participent_variable_name)))
participent_Log <- duplicated(get(participent_variable_name))
print(participent_Log)
assign(participent_variable_name, get(participent_variable_name) %>% distinct(time, .keep_all = TRUE))
# add participent id to dataframe
nRows <- nrow(get(participent_variable_name))
#tempDataFrame <- data.frame(matrix(id, nrow = countRows, ncol = 1))
tempDataFrame <- NULL
tempDataFrame <- data.frame(pId = character())
tempDataFrame[1:nRows,] <- id
tempDataFrame <- cbind(tempDataFrame, get(participent_variable_name))
assign(participent_variable_name, tempDataFrame)
# cleanup
rm(pagesTIMESUMsStage1Temp)
rm(pagesQualityParametersStage1)
rm(pagesQualityParametersStage2)
rm(rawVRQuestionnaireToolkitSSQDataFrameStage2)
rm(rawVRQuestionnaireToolkitUncannyValleyDataFrameStage1)
rm(bandPowerDataFrameStage0)
rm(bandPowerDataFrameStage1)
rm(bandPowerDataFrameStage2)
rm(performanceMetricDataFrameStage0)
rm(performanceMetricDataFrameStage1)
rm(performanceMetricDataFrameStage2)
rm(eyeTrackingInformationStage0)
rm(eyeTrackingInformationStage1)
rm(eyeTrackingInformationStage2)
rm(rawTrackingData)
rm(tempDataFrame)
rm(transformedBitalinoECGDataFrameStage0)
rm(transformedBitalinoECGDataFrameStage1)
rm(transformedBitalinoECGDataFrameStage2)
rm(transformedBitalinoEDADataFrameStage0)
rm(transformedBitalinoEDADataFrameStage1)
rm(transformedBitalinoEDADataFrameStage2)
# some misc cleanup
rm(nRows)
rm(countRows)
rm(participent_Log)
medianTimeRsi <- 0
medianTimeRsi <- median(pagesTIMESUMsStage1)
View(pagesTIMESUMsStage1)
medianTimeRsi <- 0
medianTimeRsi <- median(pagesTIMESUMsStage1.TIME_SUM)
medianTimeRsi <- 0
medianTimeRsi <- median(pagesTIMESUMsStage1$TIME_SUM)
medianTimeRsi <- 0
medianTimeRsi <- median(pagesTIMESUMsStage1$TIME_SUM)
for(i in 1:nrow(pagesTIMESUMsStage1)){
pagesTIMESUMsStage1$TIME_RSI[i] <- medianTimeRsi %/% pagesTIMESUMsStage1$TIME_SUM[i]
}
medianTimeRsi <- 0
medianTimeRsi <- median(pagesTIMESUMsStage1$TIME_SUM)
for(i in 1:nrow(pagesTIMESUMsStage1)){
pagesTIMESUMsStage1$TIME_RSI[i] <- medianTimeRsi / pagesTIMESUMsStage1$TIME_SUM[i]
}
View(`participent_id-1_DataFrame`)
View(`participent_id-1_DataFrame`)
View(`participent_id-10_DataFrame`)
# add time_rsi_calc and miss_rel_calc
# Condition A DataFrame
`participent_id-1_DataFrame`$TIMERSICalc <- pagesTIMESUMsStage1$TIME_RSI[1]
View(`participent_id-1_DataFrame`)
`participent_id-1_DataFrame`$MISSRELCalc <- pagesTIMESUMsStage1$MISSREL[1]
`participent_id-1_DataFrame`$MEDIANForTRSI <- medianTimeRsi
View(`participent_id-1_DataFrame`)
`participent_id-2_DataFrame`$TIMERSICalc <- pagesTIMESUMsStage1$TIME_RSI[2]
`participent_id-2_DataFrame`$MISSRELCalc <- pagesTIMESUMsStage1$MISSREL[2]
`participent_id-2_DataFrame`$MEDIANForTRSI <- medianTimeRsi
`participent_id-3_DataFrame`$TIMERSICalc <- pagesTIMESUMsStage1$TIME_RSI[3]
`participent_id-3_DataFrame`$MISSRELCalc <- pagesTIMESUMsStage1$MISSREL[3]
`participent_id-3_DataFrame`$MEDIANForTRSI <- medianTimeRsi
`participent_id-4_DataFrame`$TIMERSICalc <- pagesTIMESUMsStage1$TIME_RSI[4]
`participent_id-4_DataFrame`$MISSRELCalc <- pagesTIMESUMsStage1$MISSREL[4]
`participent_id-4_DataFrame`$MEDIANForTRSI <- medianTimeRsi
View(`participent_id-4_DataFrame`)
`participent_id-5_DataFrame`$TIMERSICalc <- pagesTIMESUMsStage1$TIME_RSI[5]
`participent_id-5_DataFrame`$MISSRELCalc <- pagesTIMESUMsStage1$MISSREL[5]
`participent_id-5_DataFrame`$MEDIANForTRSI <- medianTimeRsi
`participent_id-6_DataFrame`$TIMERSICalc <- pagesTIMESUMsStage1$TIME_RSI[6]
`participent_id-6_DataFrame`$MISSRELCalc <- pagesTIMESUMsStage1$MISSREL[6]
`participent_id-6_DataFrame`$MEDIANForTRSI <- medianTimeRsi
`participent_id-7_DataFrame`$TIMERSICalc <- pagesTIMESUMsStage1$TIME_RSI[7]
`participent_id-7_DataFrame`$MISSRELCalc <- pagesTIMESUMsStage1$MISSREL[7]
`participent_id-7_DataFrame`$MEDIANForTRSI <- medianTimeRsi
`participent_id-10_DataFrame`$TIMERSICalc <- pagesTIMESUMsStage1$TIME_RSI[8]
`participent_id-10_DataFrame`$MISSRELCalc <- pagesTIMESUMsStage1$MISSREL[8]
`participent_id-10_DataFrame`$MEDIANForTRSI <- medianTimeRsi
# Condition A DataFrame
all_pariticipent_dataframe <- `participent_id-1_DataFrame`
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, `participent_id-2_DataFrame`)
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, `participent_id-3_DataFrame`)
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, `participent_id-4_DataFrame`)
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, `participent_id-5_DataFrame`)
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, `participent_id-6_DataFrame`)
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, `participent_id-7_DataFrame`)
all_pariticipent_dataframe <- rbind(all_pariticipent_dataframe, `participent_id-10_DataFrame`)
View(all_pariticipent_dataframe)
path <- file.path(condition,  "R_Results", "/")
path <- file.path(path,  "All_Participents_DataFrame.csv", "")
path <- file.path(condition,  "RResults", "/")
path <- file.path(path,  "All_Participents_DataFrame.csv", "")
write.csv(all_pariticipent_dataframe, path, row.names = FALSE)
path <- file.path(condition,  "RResults", "/")
path <- file.path(path,  "All_Participents_DataFrame.csv", "")
write.csv2(all_pariticipent_dataframe, path, row.names = FALSE)
path <- file.path(condition,  "RResults", "/")
pathCSV <- file.path(path,  "All_Participents_DataFrame.csv", "")
write.csv2(all_pariticipent_dataframe, pathCSV, row.names = FALSE)
pathTXT <- file.path(path,  "All_Participents_DataFrame.txt", "")
write.table(all_pariticipent_dataframe, pathTXT, sep="\t", row.names=FALSE)
path <- file.path(condition,  "RResults", "/")
pathCSV <- file.path(path,  "All_Participents_DataFrame.csv", "")
write.csv2(all_pariticipent_dataframe, pathCSV, row.names = FALSE)
pathTXT <- file.path(path,  "All_Participents_DataFrame.txt", "")
write.table(all_pariticipent_dataframe, pathTXT, sep=" # ", row.names=FALSE)
#   10.1 Save data frames as backup
path <- file.path(condition,  "RResults", "/")
pathCSV <- file.path(path,  "Participent_id-1_DataFrame.csv", "")
pathTXT <- file.path(path,  "Participent_id-1_DataFrame.txt", "")
write.csv2(`participent_id-1_DataFrame`, pathCSV, row.names = FALSE)
write.table(`participent_id-1_DataFrame`, pathTXT, sep=" # ", row.names=FALSE)
pathCSV <- file.path(path,  "Participent_id-2_DataFrame.csv", "")
pathTXT <- file.path(path,  "Participent_id-2_DataFrame.txt", "")
write.csv2(`participent_id-2_DataFrame`, pathCSV, row.names = FALSE)
write.table(`participent_id-2_DataFrame`, pathTXT, sep=" # ", row.names=FALSE)
pathCSV <- file.path(path,  "Participent_id-3_DataFrame.csv", "")
pathTXT <- file.path(path,  "Participent_id-3_DataFrame.txt", "")
write.csv2(`participent_id-3_DataFrame`, pathCSV, row.names = FALSE)
write.table(`participent_id-3_DataFrame`, pathTXT, sep=" # ", row.names=FALSE)
pathCSV <- file.path(path,  "Participent_id-4_DataFrame.csv", "")
pathTXT <- file.path(path,  "Participent_id-4_DataFrame.txt", "")
write.csv2(`participent_id-4_DataFrame`, pathCSV, row.names = FALSE)
write.table(`participent_id-4_DataFrame`, pathTXT, sep=" # ", row.names=FALSE)
pathCSV <- file.path(path,  "Participent_id-5_DataFrame.csv", "")
pathTXT <- file.path(path,  "Participent_id-5_DataFrame.txt", "")
write.csv2(`participent_id-5_DataFrame`, pathCSV, row.names = FALSE)
write.table(`participent_id-5_DataFrame`, pathTXT, sep=" # ", row.names=FALSE)
pathCSV <- file.path(path,  "Participent_id-6_DataFrame.csv", "")
pathTXT <- file.path(path,  "Participent_id-6_DataFrame.txt", "")
write.csv2(`participent_id-6_DataFrame`, pathCSV, row.names = FALSE)
write.table(`participent_id-6_DataFrame`, pathTXT, sep=" # ", row.names=FALSE)
pathCSV <- file.path(path,  "Participent_id-7_DataFrame.csv", "")
pathTXT <- file.path(path,  "Participent_id-7_DataFrame.txt", "")
write.csv2(`participent_id-7_DataFrame`, pathCSV, row.names = FALSE)
write.table(`participent_id-7_DataFrame`, pathTXT, sep=" # ", row.names=FALSE)
pathCSV <- file.path(path,  "Participent_id-10_DataFrame.csv", "")
pathTXT <- file.path(path,  "Participent_id-10_DataFrame.txt", "")
write.csv2(`participent_id-10_DataFrame`, pathCSV, row.names = FALSE)
write.table(`participent_id-10_DataFrame`, pathTXT, sep=" # ", row.names=FALSE)
#   10.1 Save data frames as backup
path <- file.path(condition,  "RResults", "/")
pathCSV <- file.path(path,  "PagesTIMESUMsStage1_DataFrame.csv", "")
pathTXT <- file.path(path,  "PagesTIMESUMsStage1_DataFrame.txt", "")
write.csv2(pagesTIMESUMsStage1, pathCSV, row.names = FALSE)
write.table(pagesTIMESUMsStage1, pathTXT, sep=" # ", row.names=FALSE)
