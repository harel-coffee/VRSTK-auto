rowTimeValue <- rawQualityParametersPages28114Stage1$time[i]
rawQualityParametersValue <- rawQualityParametersPages28114Stage1$ParametersAsMessage_PagesParameters[i]
if (!is.null(rawQualityParametersValue) && !is.na(rawQualityParametersValue) && !is.nan(rawQualityParametersValue) && length(rawQualityParametersValue) && rawQualityParametersValue != "")
{
splittedQualityParametersValue <- stringr::str_split(rawQualityParametersValue, ";")[[1]]
splittedSTARTED <- stringr::str_split(splittedQualityParametersValue[1], " ")[[1]]
splittedSTARTED <- paste(splittedSTARTED[2], splittedSTARTED[3], splittedSTARTED[4])
degTimeLowQuality <- FALSE
if(splittedQualityParametersValue[11] == "True")
{
degTimeLowQuality <- TRUE
}
if (is.null(rawQualityParametersPages28114DataFrameStage1))
{
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "STARTED" = c(splittedSTARTED), "LASTDATA" = c(splittedQualityParametersValue[2]),
"LASTPAGE" = c(as.numeric(splittedQualityParametersValue[3])), "MAXPAGE" = c(as.numeric(splittedQualityParametersValue[4])),
"FINISHED" = c(as.numeric(splittedQualityParametersValue[5])), "TIME_SUM" = c(as.numeric(splittedQualityParametersValue[6])),
"TIME_RSI" = c(as.numeric(splittedQualityParametersValue[7])), "MISSING" = c(as.numeric(splittedQualityParametersValue[8])),
"DEG_TIME" = c(as.numeric(splittedQualityParametersValue[9])), "DegTimeThreshold" = c(as.numeric(splittedQualityParametersValue[10])),
"DegTimeLowQuality" = c(degTimeLowQuality), "DegTimeThresholdForOnePage" = c(as.numeric(splittedQualityParametersValue[12])),
"DegTimeValueForOnePage" = c(as.numeric(splittedQualityParametersValue[13])), "CurrentPageNumber" = c(as.numeric(splittedQualityParametersValue[14])),
"StandardDeviationStraightLineAnswer" = c(as.numeric(splittedQualityParametersValue[15])), "AbsoluteDerivationOfResponseValue" = c(as.numeric(splittedQualityParametersValue[16])));
rawQualityParametersPages28114DataFrameStage1 <- tempDataFrame
}
else
{
row <- c(as.numeric(rowTimeValue), splittedSTARTED, splittedQualityParametersValue[2],
as.numeric(splittedQualityParametersValue[3]), as.numeric(splittedQualityParametersValue[4]),
as.numeric(splittedQualityParametersValue[5]), as.numeric(splittedQualityParametersValue[6]),
as.numeric(splittedQualityParametersValue[7]), as.numeric(splittedQualityParametersValue[8]),
as.numeric(splittedQualityParametersValue[9]), as.numeric(splittedQualityParametersValue[10]),
degTimeLowQuality, as.numeric(splittedQualityParametersValue[12]),
as.numeric(splittedQualityParametersValue[13]), as.numeric(splittedQualityParametersValue[14]),
as.numeric(splittedQualityParametersValue[15]), as.numeric(splittedQualityParametersValue[16]));
rawQualityParametersPages28114DataFrameStage1Temp <- rawQualityParametersPages28114DataFrameStage1
rawQualityParametersPages28114DataFrameStage1Temp[nrow(rawQualityParametersPages28114DataFrameStage1) + 1, ] <- row
rawQualityParametersPages28114DataFrameStage1 <- rawQualityParametersPages28114DataFrameStage1Temp
}
}
}
rawQualityParametersPages28114Stage2 <- rawTrackingData[["Stage2"]][["Pages28800"]]
rawQualityParametersPages28114DataFrameStage2 <- NULL
rawQualityParametersPages28114DataFrameStage2Temp <- NULL
for(i in 1:nrow(rawQualityParametersPages28114Stage2))
{
rowTimeValue <- rawQualityParametersPages28114Stage2$time[i]
rawQualityParametersValue <- rawQualityParametersPages28114Stage2$ParametersAsMessage_PagesParameters[i]
if (!is.null(rawQualityParametersValue) && !is.na(rawQualityParametersValue) && !is.nan(rawQualityParametersValue) && length(rawQualityParametersValue) && rawQualityParametersValue != "")
{
splittedQualityParametersValue <- stringr::str_split(rawQualityParametersValue, ";")[[1]]
splittedSTARTED <- stringr::str_split(splittedQualityParametersValue[1], " ")[[1]]
splittedSTARTED <- paste(splittedSTARTED[2], splittedSTARTED[3], splittedSTARTED[4])
degTimeLowQuality <- FALSE
if(splittedQualityParametersValue[11] == "True")
{
degTimeLowQuality <- TRUE
}
if (is.null(rawQualityParametersPages28114DataFrameStage2))
{
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "STARTED" = c(splittedSTARTED), "LASTDATA" = c(splittedQualityParametersValue[2]),
"LASTPAGE" = c(as.numeric(splittedQualityParametersValue[3])), "MAXPAGE" = c(as.numeric(splittedQualityParametersValue[4])),
"FINISHED" = c(as.numeric(splittedQualityParametersValue[5])), "TIME_SUM" = c(as.numeric(splittedQualityParametersValue[6])),
"TIME_RSI" = c(as.numeric(splittedQualityParametersValue[7])), "MISSING" = c(as.numeric(splittedQualityParametersValue[8])),
"DEG_TIME" = c(as.numeric(splittedQualityParametersValue[9])), "DegTimeThreshold" = c(as.numeric(splittedQualityParametersValue[10])),
"DegTimeLowQuality" = c(degTimeLowQuality), "DegTimeThresholdForOnePage" = c(as.numeric(splittedQualityParametersValue[12])),
"DegTimeValueForOnePage" = c(as.numeric(splittedQualityParametersValue[13])), "CurrentPageNumber" = c(as.numeric(splittedQualityParametersValue[14])),
"StandardDeviationStraightLineAnswer" = c(as.numeric(splittedQualityParametersValue[15])), "AbsoluteDerivationOfResponseValue" = c(as.numeric(splittedQualityParametersValue[16])));
rawQualityParametersPages28114DataFrameStage2 <- tempDataFrame
}
else
{
row <- c(as.numeric(rowTimeValue), splittedSTARTED, splittedQualityParametersValue[2],
as.numeric(splittedQualityParametersValue[3]), as.numeric(splittedQualityParametersValue[4]),
as.numeric(splittedQualityParametersValue[5]), as.numeric(splittedQualityParametersValue[6]),
as.numeric(splittedQualityParametersValue[7]), as.numeric(splittedQualityParametersValue[8]),
as.numeric(splittedQualityParametersValue[9]), as.numeric(splittedQualityParametersValue[10]),
degTimeLowQuality, as.numeric(splittedQualityParametersValue[12]),
as.numeric(splittedQualityParametersValue[13]), as.numeric(splittedQualityParametersValue[14]),
as.numeric(splittedQualityParametersValue[15]), as.numeric(splittedQualityParametersValue[16]));
rawQualityParametersPages28114DataFrameStage2Temp <- rawQualityParametersPages28114DataFrameStage2
rawQualityParametersPages28114DataFrameStage2Temp[nrow(rawQualityParametersPages28114DataFrameStage2) + 1, ] <- row
rawQualityParametersPages28114DataFrameStage2 <- rawQualityParametersPages28114DataFrameStage2Temp
}
}
}
# ------------- Tage 0
rawBandPowerDataFrameStage0 <- NULL
rawBandPowerDataFrameStage0Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage0)) {
rowTimeValue <- rawEmotivTrackingDataStage0$time[i]
rowBandPowerValue <- rawEmotivTrackingDataStage0$BandPowerDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rowBandPowerValue) && !is.na(rowBandPowerValue) && !is.nan(rowBandPowerValue) && length(rowBandPowerValue) && rowBandPowerValue != "")
{
splittedBandPowerValues <- stringr::str_split(rowBandPowerValue, ";")[[1]]
splittedBandPowerValues <- stringr::str_replace(splittedBandPowerValues, ",", ".")
if (is.null(rawBandPowerDataFrameStage0))
{
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "AF3/theta" = c(as.numeric(splittedBandPowerValues[2])), "AF3/alpha" = c(as.numeric(splittedBandPowerValues[3])), "AF3/betaL" = c(as.numeric(splittedBandPowerValues[4])), "AF3/betaH" = c(as.numeric(splittedBandPowerValues[5])), "AF3/gamma" = c(as.numeric(splittedBandPowerValues[6])),
"F7/theta" = c(as.numeric(splittedBandPowerValues[7])), "F7/alpha" = c(as.numeric(splittedBandPowerValues[8])),"F7/betaL" = c(as.numeric(splittedBandPowerValues[9])),"F7/betaH" = c(as.numeric(splittedBandPowerValues[10])),"F7/gamma" = c(as.numeric(splittedBandPowerValues[11])),
"F3/theta" = c(as.numeric(splittedBandPowerValues[12])), "F3/alpha" = c(as.numeric(splittedBandPowerValues[13])),"F3/betaL" = c(as.numeric(splittedBandPowerValues[14])),"F3/betaH" = c(as.numeric(splittedBandPowerValues[15])),"F3/gamma" = c(as.numeric(splittedBandPowerValues[16])),
"FC5/theta" = c(as.numeric(splittedBandPowerValues[17])),"FC5/alpha" = c(as.numeric(splittedBandPowerValues[18])),"FC5/betaL" = c(as.numeric(splittedBandPowerValues[19])),"FC5/betaH" = c(as.numeric(splittedBandPowerValues[20])),"FC5/gamma" = c(as.numeric(splittedBandPowerValues[21])),
"T7/theta" = c(as.numeric(splittedBandPowerValues[22])), "T7/alpha" = c(as.numeric(splittedBandPowerValues[23])),"T7/betaL" = c(as.numeric(splittedBandPowerValues[24])),"T7/betaH" = c(as.numeric(splittedBandPowerValues[25])),"T7/gamma" = c(as.numeric(splittedBandPowerValues[26])),
"P7/theta" = c(as.numeric(splittedBandPowerValues[27])), "P7/alpha" = c(as.numeric(splittedBandPowerValues[28])),"P7/betaL" = c(as.numeric(splittedBandPowerValues[29])),"P7/betaH" = c(as.numeric(splittedBandPowerValues[30])),"P7/gamma" = c(as.numeric(splittedBandPowerValues[31])),
"O1/theta" = c(as.numeric(splittedBandPowerValues[32])), "O1/alpha" = c(as.numeric(splittedBandPowerValues[33])),"O1/betaL" = c(as.numeric(splittedBandPowerValues[34])),"O1/betaH" = c(as.numeric(splittedBandPowerValues[35])),"O1/gamma" = c(as.numeric(splittedBandPowerValues[36])),
"O2/theta" = c(as.numeric(splittedBandPowerValues[37])), "O2/alpha" = c(as.numeric(splittedBandPowerValues[38])),"O2/betaL" = c(as.numeric(splittedBandPowerValues[39])),"O2/betaH" = c(as.numeric(splittedBandPowerValues[40])),"O2/gamma" = c(as.numeric(splittedBandPowerValues[41])),
"P8/theta" = c(as.numeric(splittedBandPowerValues[42])), "P8/alpha" = c(as.numeric(splittedBandPowerValues[43])),"P8/betaL" = c(as.numeric(splittedBandPowerValues[44])),"P8/betaH" = c(as.numeric(splittedBandPowerValues[45])),"P8/gamma" = c(as.numeric(splittedBandPowerValues[46])),
"T8/theta" = c(as.numeric(splittedBandPowerValues[47])), "T8/alpha" = c(as.numeric(splittedBandPowerValues[48])),"T8/betaL" = c(as.numeric(splittedBandPowerValues[49])),"T8/betaH" = c(as.numeric(splittedBandPowerValues[50])),"T8/gamma" = c(as.numeric(splittedBandPowerValues[51])),
"FC6/theta" = c(as.numeric(splittedBandPowerValues[52])),"FC6/alpha" = c(as.numeric(splittedBandPowerValues[53])),"FC6/betaL" = c(as.numeric(splittedBandPowerValues[54])),"FC6/betaH" = c(as.numeric(splittedBandPowerValues[55])),"FC6/gamma" = c(as.numeric(splittedBandPowerValues[56])),
"F4/theta" = c(as.numeric(splittedBandPowerValues[57])), "F4/alpha" = c(as.numeric(splittedBandPowerValues[58])),"F4/betaL" = c(as.numeric(splittedBandPowerValues[59])),"F4/betaH" = c(as.numeric(splittedBandPowerValues[60])),"F4/gamma" = c(as.numeric(splittedBandPowerValues[61])),
"F8/theta" = c(as.numeric(splittedBandPowerValues[62])), "F8/alpha" = c(as.numeric(splittedBandPowerValues[63])),"F8/betaL" = c(as.numeric(splittedBandPowerValues[64])),"F8/betaH" = c(as.numeric(splittedBandPowerValues[65])),"F8/gamma" = c(as.numeric(splittedBandPowerValues[66])),
"AF4/theta" = c(as.numeric(splittedBandPowerValues[67])),"AF4/alpha" = c(as.numeric(splittedBandPowerValues[68])),"AF4/betaL" = c(as.numeric(splittedBandPowerValues[69])),"AF4/betaH" = c(as.numeric(splittedBandPowerValues[70])),"AF4/gamma" = c(as.numeric(splittedBandPowerValues[71])));
rawBandPowerDataFrameStage0 <- tempDataFrame
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedBandPowerValues[2]), as.numeric(splittedBandPowerValues[3]), as.numeric(splittedBandPowerValues[4]), as.numeric(splittedBandPowerValues[5]), as.numeric(splittedBandPowerValues[6]),
as.numeric(splittedBandPowerValues[7]),  as.numeric(splittedBandPowerValues[8]),  as.numeric(splittedBandPowerValues[9]),  as.numeric(splittedBandPowerValues[10]), as.numeric(splittedBandPowerValues[11]),
as.numeric(splittedBandPowerValues[12]), as.numeric(splittedBandPowerValues[13]), as.numeric(splittedBandPowerValues[14]), as.numeric(splittedBandPowerValues[15]), as.numeric(splittedBandPowerValues[16]),
as.numeric(splittedBandPowerValues[17]), as.numeric(splittedBandPowerValues[18]), as.numeric(splittedBandPowerValues[19]), as.numeric(splittedBandPowerValues[20]), as.numeric(splittedBandPowerValues[21]),
as.numeric(splittedBandPowerValues[22]), as.numeric(splittedBandPowerValues[23]), as.numeric(splittedBandPowerValues[24]), as.numeric(splittedBandPowerValues[25]), as.numeric(splittedBandPowerValues[26]),
as.numeric(splittedBandPowerValues[27]), as.numeric(splittedBandPowerValues[28]), as.numeric(splittedBandPowerValues[29]), as.numeric(splittedBandPowerValues[30]), as.numeric(splittedBandPowerValues[31]),
as.numeric(splittedBandPowerValues[32]), as.numeric(splittedBandPowerValues[33]), as.numeric(splittedBandPowerValues[34]), as.numeric(splittedBandPowerValues[35]), as.numeric(splittedBandPowerValues[36]),
as.numeric(splittedBandPowerValues[37]), as.numeric(splittedBandPowerValues[38]), as.numeric(splittedBandPowerValues[39]), as.numeric(splittedBandPowerValues[40]), as.numeric(splittedBandPowerValues[41]),
as.numeric(splittedBandPowerValues[42]), as.numeric(splittedBandPowerValues[43]), as.numeric(splittedBandPowerValues[44]), as.numeric(splittedBandPowerValues[45]), as.numeric(splittedBandPowerValues[46]),
as.numeric(splittedBandPowerValues[47]), as.numeric(splittedBandPowerValues[48]), as.numeric(splittedBandPowerValues[49]), as.numeric(splittedBandPowerValues[50]), as.numeric(splittedBandPowerValues[51]),
as.numeric(splittedBandPowerValues[52]), as.numeric(splittedBandPowerValues[53]), as.numeric(splittedBandPowerValues[54]), as.numeric(splittedBandPowerValues[55]), as.numeric(splittedBandPowerValues[56]),
as.numeric(splittedBandPowerValues[57]), as.numeric(splittedBandPowerValues[58]), as.numeric(splittedBandPowerValues[59]), as.numeric(splittedBandPowerValues[60]), as.numeric(splittedBandPowerValues[61]),
as.numeric(splittedBandPowerValues[62]), as.numeric(splittedBandPowerValues[63]), as.numeric(splittedBandPowerValues[64]), as.numeric(splittedBandPowerValues[65]), as.numeric(splittedBandPowerValues[66]),
as.numeric(splittedBandPowerValues[67]), as.numeric(splittedBandPowerValues[68]), as.numeric(splittedBandPowerValues[69]), as.numeric(splittedBandPowerValues[70]), as.numeric(splittedBandPowerValues[71]));
rawBandPowerDataFrameStage0Temp <- rawBandPowerDataFrameStage0
rawBandPowerDataFrameStage0Temp[nrow(rawBandPowerDataFrameStage0) + 1, ] <- row
rawBandPowerDataFrameStage0 <- rawBandPowerDataFrameStage0Temp
}
}
}
rawBandPowerDataFrameStage0Temp <- NULL
row <- NULL
tempDataFrame <- NULL
splittedBandPowerValues <- NULL
rowBandPowerValue <- NULL
rowTimeValue <- NULL
# ------------- Tage 1
rawBandPowerDataFrameStage1 <- NULL
rawBandPowerDataFrameStage1Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage1)) {
rowTimeValue <- rawEmotivTrackingDataStage1$time[i]
rowBandPowerValue <- rawEmotivTrackingDataStage1$BandPowerDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rowBandPowerValue) && !is.na(rowBandPowerValue) && !is.nan(rowBandPowerValue) && length(rowBandPowerValue) && rowBandPowerValue != "")
{
splittedBandPowerValues <- stringr::str_split(rowBandPowerValue, ";")[[1]]
splittedBandPowerValues <- stringr::str_replace(splittedBandPowerValues, ",", ".")
if (is.null(rawBandPowerDataFrameStage1))
{
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "AF3/theta" = c(as.numeric(splittedBandPowerValues[2])), "AF3/alpha" = c(as.numeric(splittedBandPowerValues[3])), "AF3/betaL" = c(as.numeric(splittedBandPowerValues[4])), "AF3/betaH" = c(as.numeric(splittedBandPowerValues[5])), "AF3/gamma" = c(as.numeric(splittedBandPowerValues[6])),
"F7/theta" = c(as.numeric(splittedBandPowerValues[7])), "F7/alpha" = c(as.numeric(splittedBandPowerValues[8])),"F7/betaL" = c(as.numeric(splittedBandPowerValues[9])),"F7/betaH" = c(as.numeric(splittedBandPowerValues[10])),"F7/gamma" = c(as.numeric(splittedBandPowerValues[11])),
"F3/theta" = c(as.numeric(splittedBandPowerValues[12])), "F3/alpha" = c(as.numeric(splittedBandPowerValues[13])),"F3/betaL" = c(as.numeric(splittedBandPowerValues[14])),"F3/betaH" = c(as.numeric(splittedBandPowerValues[15])),"F3/gamma" = c(as.numeric(splittedBandPowerValues[16])),
"FC5/theta" = c(as.numeric(splittedBandPowerValues[17])),"FC5/alpha" = c(as.numeric(splittedBandPowerValues[18])),"FC5/betaL" = c(as.numeric(splittedBandPowerValues[19])),"FC5/betaH" = c(as.numeric(splittedBandPowerValues[20])),"FC5/gamma" = c(as.numeric(splittedBandPowerValues[21])),
"T7/theta" = c(as.numeric(splittedBandPowerValues[22])), "T7/alpha" = c(as.numeric(splittedBandPowerValues[23])),"T7/betaL" = c(as.numeric(splittedBandPowerValues[24])),"T7/betaH" = c(as.numeric(splittedBandPowerValues[25])),"T7/gamma" = c(as.numeric(splittedBandPowerValues[26])),
"P7/theta" = c(as.numeric(splittedBandPowerValues[27])), "P7/alpha" = c(as.numeric(splittedBandPowerValues[28])),"P7/betaL" = c(as.numeric(splittedBandPowerValues[29])),"P7/betaH" = c(as.numeric(splittedBandPowerValues[30])),"P7/gamma" = c(as.numeric(splittedBandPowerValues[31])),
"O1/theta" = c(as.numeric(splittedBandPowerValues[32])), "O1/alpha" = c(as.numeric(splittedBandPowerValues[33])),"O1/betaL" = c(as.numeric(splittedBandPowerValues[34])),"O1/betaH" = c(as.numeric(splittedBandPowerValues[35])),"O1/gamma" = c(as.numeric(splittedBandPowerValues[36])),
"O2/theta" = c(as.numeric(splittedBandPowerValues[37])), "O2/alpha" = c(as.numeric(splittedBandPowerValues[38])),"O2/betaL" = c(as.numeric(splittedBandPowerValues[39])),"O2/betaH" = c(as.numeric(splittedBandPowerValues[40])),"O2/gamma" = c(as.numeric(splittedBandPowerValues[41])),
"P8/theta" = c(as.numeric(splittedBandPowerValues[42])), "P8/alpha" = c(as.numeric(splittedBandPowerValues[43])),"P8/betaL" = c(as.numeric(splittedBandPowerValues[44])),"P8/betaH" = c(as.numeric(splittedBandPowerValues[45])),"P8/gamma" = c(as.numeric(splittedBandPowerValues[46])),
"T8/theta" = c(as.numeric(splittedBandPowerValues[47])), "T8/alpha" = c(as.numeric(splittedBandPowerValues[48])),"T8/betaL" = c(as.numeric(splittedBandPowerValues[49])),"T8/betaH" = c(as.numeric(splittedBandPowerValues[50])),"T8/gamma" = c(as.numeric(splittedBandPowerValues[51])),
"FC6/theta" = c(as.numeric(splittedBandPowerValues[52])),"FC6/alpha" = c(as.numeric(splittedBandPowerValues[53])),"FC6/betaL" = c(as.numeric(splittedBandPowerValues[54])),"FC6/betaH" = c(as.numeric(splittedBandPowerValues[55])),"FC6/gamma" = c(as.numeric(splittedBandPowerValues[56])),
"F4/theta" = c(as.numeric(splittedBandPowerValues[57])), "F4/alpha" = c(as.numeric(splittedBandPowerValues[58])),"F4/betaL" = c(as.numeric(splittedBandPowerValues[59])),"F4/betaH" = c(as.numeric(splittedBandPowerValues[60])),"F4/gamma" = c(as.numeric(splittedBandPowerValues[61])),
"F8/theta" = c(as.numeric(splittedBandPowerValues[62])), "F8/alpha" = c(as.numeric(splittedBandPowerValues[63])),"F8/betaL" = c(as.numeric(splittedBandPowerValues[64])),"F8/betaH" = c(as.numeric(splittedBandPowerValues[65])),"F8/gamma" = c(as.numeric(splittedBandPowerValues[66])),
"AF4/theta" = c(as.numeric(splittedBandPowerValues[67])),"AF4/alpha" = c(as.numeric(splittedBandPowerValues[68])),"AF4/betaL" = c(as.numeric(splittedBandPowerValues[69])),"AF4/betaH" = c(as.numeric(splittedBandPowerValues[70])),"AF4/gamma" = c(as.numeric(splittedBandPowerValues[71])));
rawBandPowerDataFrameStage1 <- tempDataFrame
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedBandPowerValues[2]), as.numeric(splittedBandPowerValues[3]), as.numeric(splittedBandPowerValues[4]), as.numeric(splittedBandPowerValues[5]), as.numeric(splittedBandPowerValues[6]),
as.numeric(splittedBandPowerValues[7]),  as.numeric(splittedBandPowerValues[8]),  as.numeric(splittedBandPowerValues[9]),  as.numeric(splittedBandPowerValues[10]), as.numeric(splittedBandPowerValues[11]),
as.numeric(splittedBandPowerValues[12]), as.numeric(splittedBandPowerValues[13]), as.numeric(splittedBandPowerValues[14]), as.numeric(splittedBandPowerValues[15]), as.numeric(splittedBandPowerValues[16]),
as.numeric(splittedBandPowerValues[17]), as.numeric(splittedBandPowerValues[18]), as.numeric(splittedBandPowerValues[19]), as.numeric(splittedBandPowerValues[20]), as.numeric(splittedBandPowerValues[21]),
as.numeric(splittedBandPowerValues[22]), as.numeric(splittedBandPowerValues[23]), as.numeric(splittedBandPowerValues[24]), as.numeric(splittedBandPowerValues[25]), as.numeric(splittedBandPowerValues[26]),
as.numeric(splittedBandPowerValues[27]), as.numeric(splittedBandPowerValues[28]), as.numeric(splittedBandPowerValues[29]), as.numeric(splittedBandPowerValues[30]), as.numeric(splittedBandPowerValues[31]),
as.numeric(splittedBandPowerValues[32]), as.numeric(splittedBandPowerValues[33]), as.numeric(splittedBandPowerValues[34]), as.numeric(splittedBandPowerValues[35]), as.numeric(splittedBandPowerValues[36]),
as.numeric(splittedBandPowerValues[37]), as.numeric(splittedBandPowerValues[38]), as.numeric(splittedBandPowerValues[39]), as.numeric(splittedBandPowerValues[40]), as.numeric(splittedBandPowerValues[41]),
as.numeric(splittedBandPowerValues[42]), as.numeric(splittedBandPowerValues[43]), as.numeric(splittedBandPowerValues[44]), as.numeric(splittedBandPowerValues[45]), as.numeric(splittedBandPowerValues[46]),
as.numeric(splittedBandPowerValues[47]), as.numeric(splittedBandPowerValues[48]), as.numeric(splittedBandPowerValues[49]), as.numeric(splittedBandPowerValues[50]), as.numeric(splittedBandPowerValues[51]),
as.numeric(splittedBandPowerValues[52]), as.numeric(splittedBandPowerValues[53]), as.numeric(splittedBandPowerValues[54]), as.numeric(splittedBandPowerValues[55]), as.numeric(splittedBandPowerValues[56]),
as.numeric(splittedBandPowerValues[57]), as.numeric(splittedBandPowerValues[58]), as.numeric(splittedBandPowerValues[59]), as.numeric(splittedBandPowerValues[60]), as.numeric(splittedBandPowerValues[61]),
as.numeric(splittedBandPowerValues[62]), as.numeric(splittedBandPowerValues[63]), as.numeric(splittedBandPowerValues[64]), as.numeric(splittedBandPowerValues[65]), as.numeric(splittedBandPowerValues[66]),
as.numeric(splittedBandPowerValues[67]), as.numeric(splittedBandPowerValues[68]), as.numeric(splittedBandPowerValues[69]), as.numeric(splittedBandPowerValues[70]), as.numeric(splittedBandPowerValues[71]));
rawBandPowerDataFrameStage1Temp <- rawBandPowerDataFrameStage1
rawBandPowerDataFrameStage1Temp[nrow(rawBandPowerDataFrameStage1) + 1, ] <- row
rawBandPowerDataFrameStage1 <- rawBandPowerDataFrameStage1Temp
}
}
}
rawBandPowerDataFrameStage1Temp <- NULL
row <- NULL
tempDataFrame <- NULL
splittedBandPowerValues <- NULL
rowBandPowerValue <- NULL
rowTimeValue <- NULL
# ------------- Tage 2
rawBandPowerDataFrameStage2 <- NULL
rawBandPowerDataFrameStage2Temp <- NULL
for(i in 1:nrow(rawEmotivTrackingDataStage2)) {
rowTimeValue <- rawEmotivTrackingDataStage2$time[i]
rowBandPowerValue <- rawEmotivTrackingDataStage2$BandPowerDataMessage_CortexBrainComputerInterface[i]
if (!is.null(rowBandPowerValue) && !is.na(rowBandPowerValue) && !is.nan(rowBandPowerValue) && length(rowBandPowerValue) && rowBandPowerValue != "")
{
splittedBandPowerValues <- stringr::str_split(rowBandPowerValue, ";")[[1]]
splittedBandPowerValues <- stringr::str_replace(splittedBandPowerValues, ",", ".")
if (is.null(rawBandPowerDataFrameStage2))
{
tempDataFrame <- data.frame("time" = c(as.numeric(rowTimeValue)), "AF3/theta" = c(as.numeric(splittedBandPowerValues[2])), "AF3/alpha" = c(as.numeric(splittedBandPowerValues[3])), "AF3/betaL" = c(as.numeric(splittedBandPowerValues[4])), "AF3/betaH" = c(as.numeric(splittedBandPowerValues[5])), "AF3/gamma" = c(as.numeric(splittedBandPowerValues[6])),
"F7/theta" = c(as.numeric(splittedBandPowerValues[7])), "F7/alpha" = c(as.numeric(splittedBandPowerValues[8])),"F7/betaL" = c(as.numeric(splittedBandPowerValues[9])),"F7/betaH" = c(as.numeric(splittedBandPowerValues[10])),"F7/gamma" = c(as.numeric(splittedBandPowerValues[11])),
"F3/theta" = c(as.numeric(splittedBandPowerValues[12])), "F3/alpha" = c(as.numeric(splittedBandPowerValues[13])),"F3/betaL" = c(as.numeric(splittedBandPowerValues[14])),"F3/betaH" = c(as.numeric(splittedBandPowerValues[15])),"F3/gamma" = c(as.numeric(splittedBandPowerValues[16])),
"FC5/theta" = c(as.numeric(splittedBandPowerValues[17])),"FC5/alpha" = c(as.numeric(splittedBandPowerValues[18])),"FC5/betaL" = c(as.numeric(splittedBandPowerValues[19])),"FC5/betaH" = c(as.numeric(splittedBandPowerValues[20])),"FC5/gamma" = c(as.numeric(splittedBandPowerValues[21])),
"T7/theta" = c(as.numeric(splittedBandPowerValues[22])), "T7/alpha" = c(as.numeric(splittedBandPowerValues[23])),"T7/betaL" = c(as.numeric(splittedBandPowerValues[24])),"T7/betaH" = c(as.numeric(splittedBandPowerValues[25])),"T7/gamma" = c(as.numeric(splittedBandPowerValues[26])),
"P7/theta" = c(as.numeric(splittedBandPowerValues[27])), "P7/alpha" = c(as.numeric(splittedBandPowerValues[28])),"P7/betaL" = c(as.numeric(splittedBandPowerValues[29])),"P7/betaH" = c(as.numeric(splittedBandPowerValues[30])),"P7/gamma" = c(as.numeric(splittedBandPowerValues[31])),
"O1/theta" = c(as.numeric(splittedBandPowerValues[32])), "O1/alpha" = c(as.numeric(splittedBandPowerValues[33])),"O1/betaL" = c(as.numeric(splittedBandPowerValues[34])),"O1/betaH" = c(as.numeric(splittedBandPowerValues[35])),"O1/gamma" = c(as.numeric(splittedBandPowerValues[36])),
"O2/theta" = c(as.numeric(splittedBandPowerValues[37])), "O2/alpha" = c(as.numeric(splittedBandPowerValues[38])),"O2/betaL" = c(as.numeric(splittedBandPowerValues[39])),"O2/betaH" = c(as.numeric(splittedBandPowerValues[40])),"O2/gamma" = c(as.numeric(splittedBandPowerValues[41])),
"P8/theta" = c(as.numeric(splittedBandPowerValues[42])), "P8/alpha" = c(as.numeric(splittedBandPowerValues[43])),"P8/betaL" = c(as.numeric(splittedBandPowerValues[44])),"P8/betaH" = c(as.numeric(splittedBandPowerValues[45])),"P8/gamma" = c(as.numeric(splittedBandPowerValues[46])),
"T8/theta" = c(as.numeric(splittedBandPowerValues[47])), "T8/alpha" = c(as.numeric(splittedBandPowerValues[48])),"T8/betaL" = c(as.numeric(splittedBandPowerValues[49])),"T8/betaH" = c(as.numeric(splittedBandPowerValues[50])),"T8/gamma" = c(as.numeric(splittedBandPowerValues[51])),
"FC6/theta" = c(as.numeric(splittedBandPowerValues[52])),"FC6/alpha" = c(as.numeric(splittedBandPowerValues[53])),"FC6/betaL" = c(as.numeric(splittedBandPowerValues[54])),"FC6/betaH" = c(as.numeric(splittedBandPowerValues[55])),"FC6/gamma" = c(as.numeric(splittedBandPowerValues[56])),
"F4/theta" = c(as.numeric(splittedBandPowerValues[57])), "F4/alpha" = c(as.numeric(splittedBandPowerValues[58])),"F4/betaL" = c(as.numeric(splittedBandPowerValues[59])),"F4/betaH" = c(as.numeric(splittedBandPowerValues[60])),"F4/gamma" = c(as.numeric(splittedBandPowerValues[61])),
"F8/theta" = c(as.numeric(splittedBandPowerValues[62])), "F8/alpha" = c(as.numeric(splittedBandPowerValues[63])),"F8/betaL" = c(as.numeric(splittedBandPowerValues[64])),"F8/betaH" = c(as.numeric(splittedBandPowerValues[65])),"F8/gamma" = c(as.numeric(splittedBandPowerValues[66])),
"AF4/theta" = c(as.numeric(splittedBandPowerValues[67])),"AF4/alpha" = c(as.numeric(splittedBandPowerValues[68])),"AF4/betaL" = c(as.numeric(splittedBandPowerValues[69])),"AF4/betaH" = c(as.numeric(splittedBandPowerValues[70])),"AF4/gamma" = c(as.numeric(splittedBandPowerValues[71])));
rawBandPowerDataFrameStage2 <- tempDataFrame
}
else
{
row <- c(as.numeric(rowTimeValue), as.numeric(splittedBandPowerValues[2]), as.numeric(splittedBandPowerValues[3]), as.numeric(splittedBandPowerValues[4]), as.numeric(splittedBandPowerValues[5]), as.numeric(splittedBandPowerValues[6]),
as.numeric(splittedBandPowerValues[7]),  as.numeric(splittedBandPowerValues[8]),  as.numeric(splittedBandPowerValues[9]),  as.numeric(splittedBandPowerValues[10]), as.numeric(splittedBandPowerValues[11]),
as.numeric(splittedBandPowerValues[12]), as.numeric(splittedBandPowerValues[13]), as.numeric(splittedBandPowerValues[14]), as.numeric(splittedBandPowerValues[15]), as.numeric(splittedBandPowerValues[16]),
as.numeric(splittedBandPowerValues[17]), as.numeric(splittedBandPowerValues[18]), as.numeric(splittedBandPowerValues[19]), as.numeric(splittedBandPowerValues[20]), as.numeric(splittedBandPowerValues[21]),
as.numeric(splittedBandPowerValues[22]), as.numeric(splittedBandPowerValues[23]), as.numeric(splittedBandPowerValues[24]), as.numeric(splittedBandPowerValues[25]), as.numeric(splittedBandPowerValues[26]),
as.numeric(splittedBandPowerValues[27]), as.numeric(splittedBandPowerValues[28]), as.numeric(splittedBandPowerValues[29]), as.numeric(splittedBandPowerValues[30]), as.numeric(splittedBandPowerValues[31]),
as.numeric(splittedBandPowerValues[32]), as.numeric(splittedBandPowerValues[33]), as.numeric(splittedBandPowerValues[34]), as.numeric(splittedBandPowerValues[35]), as.numeric(splittedBandPowerValues[36]),
as.numeric(splittedBandPowerValues[37]), as.numeric(splittedBandPowerValues[38]), as.numeric(splittedBandPowerValues[39]), as.numeric(splittedBandPowerValues[40]), as.numeric(splittedBandPowerValues[41]),
as.numeric(splittedBandPowerValues[42]), as.numeric(splittedBandPowerValues[43]), as.numeric(splittedBandPowerValues[44]), as.numeric(splittedBandPowerValues[45]), as.numeric(splittedBandPowerValues[46]),
as.numeric(splittedBandPowerValues[47]), as.numeric(splittedBandPowerValues[48]), as.numeric(splittedBandPowerValues[49]), as.numeric(splittedBandPowerValues[50]), as.numeric(splittedBandPowerValues[51]),
as.numeric(splittedBandPowerValues[52]), as.numeric(splittedBandPowerValues[53]), as.numeric(splittedBandPowerValues[54]), as.numeric(splittedBandPowerValues[55]), as.numeric(splittedBandPowerValues[56]),
as.numeric(splittedBandPowerValues[57]), as.numeric(splittedBandPowerValues[58]), as.numeric(splittedBandPowerValues[59]), as.numeric(splittedBandPowerValues[60]), as.numeric(splittedBandPowerValues[61]),
as.numeric(splittedBandPowerValues[62]), as.numeric(splittedBandPowerValues[63]), as.numeric(splittedBandPowerValues[64]), as.numeric(splittedBandPowerValues[65]), as.numeric(splittedBandPowerValues[66]),
as.numeric(splittedBandPowerValues[67]), as.numeric(splittedBandPowerValues[68]), as.numeric(splittedBandPowerValues[69]), as.numeric(splittedBandPowerValues[70]), as.numeric(splittedBandPowerValues[71]));
rawBandPowerDataFrameStage2Temp <- rawBandPowerDataFrameStage2
rawBandPowerDataFrameStage2Temp[nrow(rawBandPowerDataFrameStage2) + 1, ] <- row
rawBandPowerDataFrameStage2 <- rawBandPowerDataFrameStage2Temp
}
}
}
rawBandPowerDataFrameStage2Temp <- NULL
row <- NULL
tempDataFrame <- NULL
splittedBandPowerValues <- NULL
rowBandPowerValue <- NULL
rowTimeValue <- NULL
rawEmotivTrackingDataStage0 <- rawTrackingData[["Stage0"]][["EmotivBrainComputerInterfaceTracker41012"]];
rawEmotivTrackingDataStage1 <- rawTrackingData[["Stage1"]][["EmotivBrainComputerInterfaceTracker41012"]];
rawEmotivTrackingDataStage2 <- rawTrackingData[["Stage2"]][["EmotivBrainComputerInterfaceTracker41012"]];
View(rawTrackingData)
View(rawEmotivTrackingDataStage0)
View(rawTrackingData)
View(rawEmotivTrackingDataStage0)
View(rawEmotivTrackingDataStage1)
rawEyeTrackingInformationStage0 <- rawTrackingData[["Stage0"]][["CameraTracking25332"]]
View(rawEyeTrackingInformationStage0)
source("~/GitHub/VRSTK/RTools/RawFixationSaccadesData.R")
source("~/GitHub/VRSTK/RTools/ImportTrackingData.R")
#-------------- Stage 0
rawEyeTrackingInformationStage0 <- rawTrackingData[["Stage0"]][["CameraTracking25332"]]
rawEyeTrackingInformationDataFrameStage0 <- NULL
rawEyeTrackingInformationDataFrameStage0Temp <- NULL
for(i in 1:nrow(rawEyeTrackingInformationStage0)) {
rowTimeValue <- rawEyeTrackingInformationStage0$time[i]
rawLeftEyeInformationsAsMessage <- rawEyeTrackingInformationStage0$EyeTrackingLeftEyeInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
rawRightEyeInformationsAsMessage <- rawEyeTrackingInformationStage0$EyeTrackingRightEyeInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
rawFixationsInformationAsMessage <- rawEyeTrackingInformationStage0$FixationsInformationAsMessage_EyeTrackingCalibrationSaccades[i]
rawSaccadsInformationsAsMessage <- rawEyeTrackingInformationStage0$SaccadsInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
if (!is.null(rawLeftEyeInformationsAsMessage) && !is.na(rawLeftEyeInformationsAsMessage) && !is.nan(rawLeftEyeInformationsAsMessage) && length(rawLeftEyeInformationsAsMessage) && rawLeftEyeInformationsAsMessage != "")
{
splittedLeftEyeInformationsValue <- stringr::str_split(rawLeftEyeInformationsAsMessage, ";")[[1]]
splittedRightEyeInformationsValue <- stringr::str_split(rawRightEyeInformationsAsMessage, ";")[[1]]
splittedFixationsInformationValue <- stringr::str_split(rawFixationsInformationAsMessage, ";")[[1]]
splittedSaccadsInformationsValue <- stringr::str_split(rawSaccadsInformationsAsMessage, ";")[[1]]
if (is.null(rawEyeTrackingInformationDataFrameStage0))
{
rawEyeTrackingInformationDataFrameStage0 <- data.frame("time" = c(as.numeric(rowTimeValue)),
"LeftEyeOpenness" = c(as.numeric(splittedLeftEyeInformationsValue[3])),
"LeftPupilDiameter" = c(as.numeric(splittedLeftEyeInformationsValue[4])),
"RightEyeOpenness" = c(as.numeric(splittedRightEyeInformationsValue[3])),
"RightPupilDiameter" = c(as.numeric(splittedRightEyeInformationsValue[4])),
"TotalFixationCounter" = c(as.numeric(splittedFixationsInformationValue[1])),
"FixationCounter" = c(as.numeric(splittedFixationsInformationValue[2])),
"TotalFixationDuration" = c(as.numeric(splittedFixationsInformationValue[3])),
"FixationDuration" = c(as.numeric(splittedFixationsInformationValue[4])),
"MeasuredVelocity" = c(as.numeric(splittedSaccadsInformationsValue[3])),
"SaccadeCounter" = c(as.numeric(splittedSaccadsInformationsValue[4])));
}
else
{
row <- c(as.numeric(rowTimeValue),
as.numeric(splittedLeftEyeInformationsValue[3]),
as.numeric(splittedLeftEyeInformationsValue[4]),
as.numeric(splittedRightEyeInformationsValue[3]),
as.numeric(splittedRightEyeInformationsValue[4]),
as.numeric(splittedFixationsInformationValue[1]),
as.numeric(splittedFixationsInformationValue[2]),
as.numeric(splittedFixationsInformationValue[3]),
as.numeric(splittedFixationsInformationValue[4]),
as.numeric(splittedSaccadsInformationsValue[3]),
as.numeric(splittedSaccadsInformationsValue[4]));
rawEyeTrackingInformationDataFrameStage0Temp <- rawEyeTrackingInformationDataFrameStage0
rawEyeTrackingInformationDataFrameStage0Temp[nrow(rawEyeTrackingInformationDataFrameStage0) + 1, ] <- row
rawEyeTrackingInformationDataFrameStage0 <- rawEyeTrackingInformationDataFrameStage0Temp
}
}
}
rawEyeTrackingInformationDataFrameStage0Temp <- NULL
rowTimeValue <- NULL
rawLeftEyeInformationsAsMessage <- NULL
rawRightEyeInformationsAsMessage <- NULL
rawFixationsInformationAsMessage <- NULL
rawSaccadsInformationsAsMessage <- NULL
splittedLeftEyeInformationsValue <- NULL
splittedRightEyeInformationsValue <- NULL
splittedFixationsInformationValue <- NULL
splittedSaccadsInformationsValue <-  NULL
View(rawEyeTrackingInformationDataFrameStage0)
#-------------- Stage 0
rawEyeTrackingInformationStage0 <- rawTrackingData[["Stage0"]][["CameraTracking25332"]]
rawEyeTrackingInformationDataFrameStage0 <- NULL
rawEyeTrackingInformationDataFrameStage0Temp <- NULL
for(i in 1:nrow(rawEyeTrackingInformationStage0)) {
rowTimeValue <- rawEyeTrackingInformationStage0$time[i]
rawLeftEyeInformationsAsMessage <- rawEyeTrackingInformationStage0$EyeTrackingLeftEyeInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
rawRightEyeInformationsAsMessage <- rawEyeTrackingInformationStage0$EyeTrackingRightEyeInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
rawFixationsInformationAsMessage <- rawEyeTrackingInformationStage0$FixationsInformationAsMessage_EyeTrackingCalibrationSaccades[i]
rawSaccadsInformationsAsMessage <- rawEyeTrackingInformationStage0$SaccadsInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
if (!is.null(rawLeftEyeInformationsAsMessage) && !is.na(rawLeftEyeInformationsAsMessage) && !is.nan(rawLeftEyeInformationsAsMessage) && length(rawLeftEyeInformationsAsMessage) && rawLeftEyeInformationsAsMessage != "")
{
splittedLeftEyeInformationsValue <- stringr::str_split(rawLeftEyeInformationsAsMessage, ";")[[1]]
splittedRightEyeInformationsValue <- stringr::str_split(rawRightEyeInformationsAsMessage, ";")[[1]]
splittedFixationsInformationValue <- stringr::str_split(rawFixationsInformationAsMessage, ";")[[1]]
splittedSaccadsInformationsValue <- stringr::str_split(rawSaccadsInformationsAsMessage, ";")[[1]]
if (is.null(rawEyeTrackingInformationDataFrameStage0))
{
rawEyeTrackingInformationDataFrameStage0 <- data.frame("time" = c(as.numeric(rowTimeValue)),
"LeftEyeOpenness" = c(as.numeric(splittedLeftEyeInformationsValue[3])),
"LeftPupilDiameter" = c(as.numeric(splittedLeftEyeInformationsValue[4])),
"RightEyeOpenness" = c(as.numeric(splittedRightEyeInformationsValue[3])),
"RightPupilDiameter" = c(as.numeric(splittedRightEyeInformationsValue[4])),
"TotalFixationCounter" = c(as.numeric(splittedFixationsInformationValue[1])),
"FixationCounter" = c(as.numeric(splittedFixationsInformationValue[2])),
"TotalFixationDuration" = c(as.numeric(splittedFixationsInformationValue[3])),
"FixationDuration" = c(as.numeric(splittedFixationsInformationValue[4])),
"MeasuredVelocity" = c(as.numeric(splittedSaccadsInformationsValue[3])),
"SaccadeCounter" = c(as.numeric(splittedSaccadsInformationsValue[4])));
}
else
{
row <- c(as.numeric(rowTimeValue),
as.numeric(splittedLeftEyeInformationsValue[3]),
as.numeric(splittedLeftEyeInformationsValue[4]),
as.numeric(splittedRightEyeInformationsValue[3]),
as.numeric(splittedRightEyeInformationsValue[4]),
as.numeric(splittedFixationsInformationValue[1]),
as.numeric(splittedFixationsInformationValue[2]),
as.numeric(splittedFixationsInformationValue[3]),
as.numeric(splittedFixationsInformationValue[4]),
as.numeric(splittedSaccadsInformationsValue[3]),
as.numeric(splittedSaccadsInformationsValue[4]));
rawEyeTrackingInformationDataFrameStage0Temp <- rawEyeTrackingInformationDataFrameStage0
rawEyeTrackingInformationDataFrameStage0Temp[nrow(rawEyeTrackingInformationDataFrameStage0) + 1, ] <- row
rawEyeTrackingInformationDataFrameStage0 <- rawEyeTrackingInformationDataFrameStage0Temp
}
}
}
rawEyeTrackingInformationDataFrameStage0Temp <- NULL
rowTimeValue <- NULL
rawLeftEyeInformationsAsMessage <- NULL
rawRightEyeInformationsAsMessage <- NULL
rawFixationsInformationAsMessage <- NULL
rawSaccadsInformationsAsMessage <- NULL
splittedLeftEyeInformationsValue <- NULL
splittedRightEyeInformationsValue <- NULL
splittedFixationsInformationValue <- NULL
splittedSaccadsInformationsValue <-  NULL
#-------------- Stage 1
rawEyeTrackingInformationStage1 <- rawTrackingData[["Stage1"]][["CameraTracking25332"]]
rawEyeTrackingInformationDataFrameStage1 <- NULL
rawEyeTrackingInformationDataFrameStage1Temp <- NULL
for(i in 1:nrow(rawEyeTrackingInformationStage1)) {
rowTimeValue <- rawEyeTrackingInformationStage1$time[i]
rawLeftEyeInformationsAsMessage <- rawEyeTrackingInformationStage1$EyeTrackingLeftEyeInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
rawRightEyeInformationsAsMessage <- rawEyeTrackingInformationStage1$EyeTrackingRightEyeInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
rawFixationsInformationAsMessage <- rawEyeTrackingInformationStage1$FixationsInformationAsMessage_EyeTrackingCalibrationSaccades[i]
rawSaccadsInformationsAsMessage <- rawEyeTrackingInformationStage1$SaccadsInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
if (!is.null(rawLeftEyeInformationsAsMessage) && !is.na(rawLeftEyeInformationsAsMessage) && !is.nan(rawLeftEyeInformationsAsMessage) && length(rawLeftEyeInformationsAsMessage) && rawLeftEyeInformationsAsMessage != "")
{
splittedLeftEyeInformationsValue <- stringr::str_split(rawLeftEyeInformationsAsMessage, ";")[[1]]
splittedRightEyeInformationsValue <- stringr::str_split(rawRightEyeInformationsAsMessage, ";")[[1]]
splittedFixationsInformationValue <- stringr::str_split(rawFixationsInformationAsMessage, ";")[[1]]
splittedSaccadsInformationsValue <- stringr::str_split(rawSaccadsInformationsAsMessage, ";")[[1]]
if (is.null(rawEyeTrackingInformationDataFrameStage1))
{
rawEyeTrackingInformationDataFrameStage1 <- data.frame("time" = c(as.numeric(rowTimeValue)),
"LeftEyeOpenness" = c(as.numeric(splittedLeftEyeInformationsValue[3])),
"LeftPupilDiameter" = c(as.numeric(splittedLeftEyeInformationsValue[4])),
"RightEyeOpenness" = c(as.numeric(splittedRightEyeInformationsValue[3])),
"RightPupilDiameter" = c(as.numeric(splittedRightEyeInformationsValue[4])),
"TotalFixationCounter" = c(as.numeric(splittedFixationsInformationValue[1])),
"FixationCounter" = c(as.numeric(splittedFixationsInformationValue[2])),
"TotalFixationDuration" = c(as.numeric(splittedFixationsInformationValue[3])),
"FixationDuration" = c(as.numeric(splittedFixationsInformationValue[4])),
"MeasuredVelocity" = c(as.numeric(splittedSaccadsInformationsValue[3])),
"SaccadeCounter" = c(as.numeric(splittedSaccadsInformationsValue[4])));
}
else
{
row <- c(as.numeric(rowTimeValue),
as.numeric(splittedLeftEyeInformationsValue[3]),
as.numeric(splittedLeftEyeInformationsValue[4]),
as.numeric(splittedRightEyeInformationsValue[3]),
as.numeric(splittedRightEyeInformationsValue[4]),
as.numeric(splittedFixationsInformationValue[1]),
as.numeric(splittedFixationsInformationValue[2]),
as.numeric(splittedFixationsInformationValue[3]),
as.numeric(splittedFixationsInformationValue[4]),
as.numeric(splittedSaccadsInformationsValue[3]),
as.numeric(splittedSaccadsInformationsValue[4]));
rawEyeTrackingInformationDataFrameStage1Temp <- rawEyeTrackingInformationDataFrameStage1
rawEyeTrackingInformationDataFrameStage1Temp[nrow(rawEyeTrackingInformationDataFrameStage1) + 1, ] <- row
rawEyeTrackingInformationDataFrameStage1 <- rawEyeTrackingInformationDataFrameStage1Temp
}
}
}
rawEyeTrackingInformationDataFrameStage1Temp <- NULL
rowTimeValue <- NULL
rawLeftEyeInformationsAsMessage <- NULL
rawRightEyeInformationsAsMessage <- NULL
rawFixationsInformationAsMessage <- NULL
rawSaccadsInformationsAsMessage <- NULL
splittedLeftEyeInformationsValue <- NULL
splittedRightEyeInformationsValue <- NULL
splittedFixationsInformationValue <- NULL
splittedSaccadsInformationsValue <-  NULL
#-------------- Stage 2
rawEyeTrackingInformationStage2 <- rawTrackingData[["Stage2"]][["CameraTracking25332"]]
rawEyeTrackingInformationDataFrameStage2 <- NULL
rawEyeTrackingInformationDataFrameStage2Temp <- NULL
for(i in 1:nrow(rawEyeTrackingInformationStage2)) {
rowTimeValue <- rawEyeTrackingInformationStage2$time[i]
rawLeftEyeInformationsAsMessage <- rawEyeTrackingInformationStage2$EyeTrackingLeftEyeInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
rawRightEyeInformationsAsMessage <- rawEyeTrackingInformationStage2$EyeTrackingRightEyeInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
rawFixationsInformationAsMessage <- rawEyeTrackingInformationStage2$FixationsInformationAsMessage_EyeTrackingCalibrationSaccades[i]
rawSaccadsInformationsAsMessage <- rawEyeTrackingInformationStage2$SaccadsInformationsAsMessage_EyeTrackingCalibrationSaccades[i]
if (!is.null(rawLeftEyeInformationsAsMessage) && !is.na(rawLeftEyeInformationsAsMessage) && !is.nan(rawLeftEyeInformationsAsMessage) && length(rawLeftEyeInformationsAsMessage) && rawLeftEyeInformationsAsMessage != "")
{
splittedLeftEyeInformationsValue <- stringr::str_split(rawLeftEyeInformationsAsMessage, ";")[[1]]
splittedRightEyeInformationsValue <- stringr::str_split(rawRightEyeInformationsAsMessage, ";")[[1]]
splittedFixationsInformationValue <- stringr::str_split(rawFixationsInformationAsMessage, ";")[[1]]
splittedSaccadsInformationsValue <- stringr::str_split(rawSaccadsInformationsAsMessage, ";")[[1]]
if (is.null(rawEyeTrackingInformationDataFrameStage2))
{
rawEyeTrackingInformationDataFrameStage2 <- data.frame("time" = c(as.numeric(rowTimeValue)),
"LeftEyeOpenness" = c(as.numeric(splittedLeftEyeInformationsValue[3])),
"LeftPupilDiameter" = c(as.numeric(splittedLeftEyeInformationsValue[4])),
"RightEyeOpenness" = c(as.numeric(splittedRightEyeInformationsValue[3])),
"RightPupilDiameter" = c(as.numeric(splittedRightEyeInformationsValue[4])),
"TotalFixationCounter" = c(as.numeric(splittedFixationsInformationValue[1])),
"FixationCounter" = c(as.numeric(splittedFixationsInformationValue[2])),
"TotalFixationDuration" = c(as.numeric(splittedFixationsInformationValue[3])),
"FixationDuration" = c(as.numeric(splittedFixationsInformationValue[4])),
"MeasuredVelocity" = c(as.numeric(splittedSaccadsInformationsValue[3])),
"SaccadeCounter" = c(as.numeric(splittedSaccadsInformationsValue[4])));
}
else
{
row <- c(as.numeric(rowTimeValue),
as.numeric(splittedLeftEyeInformationsValue[3]),
as.numeric(splittedLeftEyeInformationsValue[4]),
as.numeric(splittedRightEyeInformationsValue[3]),
as.numeric(splittedRightEyeInformationsValue[4]),
as.numeric(splittedFixationsInformationValue[1]),
as.numeric(splittedFixationsInformationValue[2]),
as.numeric(splittedFixationsInformationValue[3]),
as.numeric(splittedFixationsInformationValue[4]),
as.numeric(splittedSaccadsInformationsValue[3]),
as.numeric(splittedSaccadsInformationsValue[4]));
rawEyeTrackingInformationDataFrameStage2Temp <- rawEyeTrackingInformationDataFrameStage2
rawEyeTrackingInformationDataFrameStage2Temp[nrow(rawEyeTrackingInformationDataFrameStage2) + 1, ] <- row
rawEyeTrackingInformationDataFrameStage2 <- rawEyeTrackingInformationDataFrameStage2Temp
}
}
}
rawEyeTrackingInformationDataFrameStage2Temp <- NULL
rowTimeValue <- NULL
rawLeftEyeInformationsAsMessage <- NULL
rawRightEyeInformationsAsMessage <- NULL
rawFixationsInformationAsMessage <- NULL
rawSaccadsInformationsAsMessage <- NULL
splittedLeftEyeInformationsValue <- NULL
splittedRightEyeInformationsValue <- NULL
splittedFixationsInformationValue <- NULL
splittedSaccadsInformationsValue <-  NULL
View(rawEyeTrackingInformationDataFrameStage0)
View(rawEyeTrackingInformationDataFrameStage1)
View(rawEyeTrackingInformationDataFrameStage2)
View(rawEyeTrackingInformationDataFrameStage1)
View(rawEyeTrackingInformationDataFrameStage2)
View(rawEyeTrackingInformationDataFrameStage0)
View(rawEyeTrackingInformationDataFrameStage1)
View(rawEyeTrackingInformationDataFrameStage1)
View(rawEyeTrackingInformationDataFrameStage2)
View(rawEyeTrackingInformationStage0)
